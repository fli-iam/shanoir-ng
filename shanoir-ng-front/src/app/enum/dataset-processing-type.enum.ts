/**
 * Shanoir NG - Import, manage and share neuroimaging data
 * Copyright (C) 2009-2019 Inria - https://www.inria.fr/
 * Contact us on https://project.inria.fr/shanoir/
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.html
 */

import { Option } from "../shared/select/select.component";
import { capitalsAndUnderscoresToDisplayable, allOfEnum } from "../utils/app.utils";

export enum DatasetProcessingType {

    SEGMENTATION = 'SEGMENTATION',
    BOUNDARY_SURFACE_BASED_SEGMENTATION = 'BOUNDARY_SURFACE_BASED_SEGMENTATION',
    REGION_BASED_SEGMENTATION = 'REGION_BASED_SEGMENTATION',
    BOUNDARY_SURFACE_AND_REGION_BASED_SEGMENTATION = 'BOUNDARY_SURFACE_AND_REGION_BASED_SEGMENTATION',
    BRAIN_SEGMENTATION = 'BRAIN_SEGMENTATION',
    TISSUES_SEGMENTATION = 'TISSUES_SEGMENTATION',
    SUBCORTICAL_SEGMENTATION = 'SUBCORTICAL_SEGMENTATION',
    LESION_SEGMENTATION = 'LESION_SEGMENTATION',
    RECONSTRUCTION = 'RECONSTRUCTION',
    REGISTRATION = 'REGISTRATION',
    NORMALIZATION = 'NORMALIZATION',
    REGISTRATION_WITH_DISTORSION_CORRECTION = 'REGISTRATION_WITH_DISTORSION_CORRECTION',
    AFFINE_REGISTRATION = 'AFFINE_REGISTRATION',
    NON_AFFINE_REGISTRATION = 'NON_AFFINE_REGISTRATION',
    RIGID_REGISTRATION = 'RIGID_REGISTRATION',
    AFFINE_NON_RIGID_REGISTRATION = 'AFFINE_NON_RIGID_REGISTRATION',
    MONO_MODALITY_RIGID_REGISTRATION = 'MONO_MODALITY_RIGID_REGISTRATION',
    MULTI_MODALITY_RIGID_REGISTRATION = 'MULTI_MODALITY_RIGID_REGISTRATION',
    MONO_MODALITY_AFFINE_NON_RIGID_REGISTRATION = 'MONO_MODALITY_AFFINE_NON_RIGID_REGISTRATION',
    MULTI_MODALITY_AFFINE_NON_RIGID_REGISTRATION = 'MULTI_MODALITY_AFFINE_NON_RIGID_REGISTRATION',
    MONO_MODALITY_NON_AFFINE_REGISTRATION = 'MONO_MODALITY_NON_AFFINE_REGISTRATION',
    MULTI_MODALITY_NON_AFFINE_REGISTRATION = 'MULTI_MODALITY_NON_AFFINE_REGISTRATION',
    RESAMPLING = 'RESAMPLING',
    CROPPING = 'CROPPING',
    RE_ORIENTATION = 'RE_ORIENTATION',
    INTENSITY_MODIFICATION = 'INTENSITY_MODIFICATION',
    DATASET_ARITHMETICAL_OPERATION = 'DATASET_ARITHMETICAL_OPERATION',
    DATASETS_ADDITION = 'DATASETS_ADDITION',
    DATASETS_SUBSTRACTION = 'DATASETS_SUBSTRACTION',
    DATASETS_MULTIPLICATION = 'DATASETS_MULTIPLICATION',
    DATASETS_DIVISION = 'DATASETS_DIVISION',
    DATASETS_LOGICAL_OPERATION = 'DATASETS_LOGICAL_OPERATION',
    DATASETS_BLENDING = 'DATASETS_BLENDING',
    MESH_GENERATION = 'MESH_GENERATION',
    STRUCTURED_MESH_GENERATION = 'STRUCTURED_MESH_GENERATION',
    UNSTRUCTURED_MESH_GENERATION = 'UNSTRUCTURED_MESH_GENERATION',
    FILTERING = 'FILTERING',
    THRESHOLDING = 'THRESHOLDING',
    CONVOLUTION = 'CONVOLUTION',
    SMOOTHING = 'SMOOTHING',
    HIGH_PASS_FILTERING = 'HIGH_PASS_FILTERING',
    LOW_PASS_FILTERING = 'LOW_PASS_FILTERING',
    MATHEMATICAL_MORPHOLOGY_FILTERING = 'MATHEMATICAL_MORPHOLOGY_FILTERING',
    EROSION = 'EROSION',
    DILATION = 'DILATION',
    OPENING = 'OPENING',
    CLOSING = 'CLOSING',
    THINNING = 'THINNING',
    THICKENING = 'THICKENING',
    SKELETONIZING = 'SKELETONIZING',
    DISTANCE_TRANSFORM_PROCESSING = 'DISTANCE_TRANSFORM_PROCESSING',
    DATASET_TRANSFORMATION = 'DATASET_TRANSFORMATION',
    FOURIER_TRANSFORMATION = 'FOURIER_TRANSFORMATION',
    WAVELET_TRANSFORMATION = 'WAVELET_TRANSFORMATION',
    RESTORATION = 'RESTORATION',
    DENOISING = 'DENOISING',
    BIAS_CORRECTION = 'BIAS_CORRECTION',
    DISTORSION_CORRECTION = 'DISTORSION_CORRECTION',
    STATISTICAL_PROCESSING = 'STATISTICAL_PROCESSING',
    MEAN_CALCULATION = 'MEAN_CALCULATION',
    STANDARD_DEVIATION_CALCULATION = 'STANDARD_DEVIATION_CALCULATION',
    COEFFICIENT_OF_VARIATION_CALCULATION = 'COEFFICIENT_OF_VARIATION_CALCULATION',
    CALIBRATION_MODEL_ESTIMATION = 'CALIBRATION_MODEL_ESTIMATION',
    CALIBRATION_MODEL_APPLICATION = 'CALIBRATION_MODEL_APPLICATION',
    QUANTITATIVE_PARAMETER_ESTIMATION = 'QUANTITATIVE_PARAMETER_ESTIMATION',
    QUANTITATIVE_T1_ESTIMATION = 'QUANTITATIVE_T1_ESTIMATION',
    QUANTITATIVE_T2_ESTIMATION = 'QUANTITATIVE_T2_ESTIMATION',
    QUANTITATIVE_T2_STAR_ESTIMATION = 'QUANTITATIVE_T2_STAR_ESTIMATION',
    ABSOLUTE_PROTON_DENSITY_ESTIMATION = 'ABSOLUTE_PROTON_DENSITY_ESTIMATION',
    FRACTIONAL_ANISOTROPY_ESTIMATION = 'FRACTIONAL_ANISOTROPY_ESTIMATION',
    RELATIVE_ANISOTROPY_ESTIMATION = 'RELATIVE_ANISOTROPY_ESTIMATION',
    DIFFUSION_TENSOR_CALCULATION = 'DIFFUSION_TENSOR_CALCULATION',
    MEAN_DIFFUSIVITY_CALCULATION = 'MEAN_DIFFUSIVITY_CALCULATION',
    VOXEL_DISPLACEMENT_MAP_CALCULATION = 'VOXEL_DISPLACEMENT_MAP_CALCULATION',
    FIELD_MAP_ESTIMATION = 'FIELD_MAP_ESTIMATION',
    REGIONAL_CEREBRAL_BLOOD_FLOW_ESTIMATION = 'REGIONAL_CEREBRAL_BLOOD_FLOW_ESTIMATION',
    REGIONAL_CEREBRAL_BLOOD_VOLUME_ESTIMATION = 'REGIONAL_CEREBRAL_BLOOD_VOLUME_ESTIMATION',
    REGIONAL_MEAN_TRANSIT_TIME_CALCULATION = 'REGIONAL_MEAN_TRANSIT_TIME_CALCULATION',
    ABSOLUTE_METABOLITE_CONCENTRATION_ESTIMATION = 'ABSOLUTE_METABOLITE_CONCENTRATION_ESTIMATION',
    METABOLITE_CONCENTRATION_RATIO_ESTIMATION = 'METABOLITE_CONCENTRATION_RATIO_ESTIMATION',
    BLOOD_OXYGEN_LEVEL_DEPENDENT_SIGNAL_CHANGES_ESTIMATION = 'BLOOD_OXYGEN_LEVEL_DEPENDENT_SIGNAL_CHANGES_ESTIMATION',
    FORMAT_CONVERSION = 'FORMAT_CONVERSION'

} export namespace DatasetProcessingType {
    
    export function all(): Array<DatasetProcessingType> {
        return allOfEnum<DatasetProcessingType>(DatasetProcessingType);
    }

    export function getLabel(type: DatasetProcessingType): string {
        // Could override some of them (non-..., T1, ...)
        return capitalsAndUnderscoresToDisplayable(type);
    }

    export var options: Option<DatasetProcessingType>[] = all().map(prop => new Option<DatasetProcessingType>(prop, getLabel(prop)));
}

