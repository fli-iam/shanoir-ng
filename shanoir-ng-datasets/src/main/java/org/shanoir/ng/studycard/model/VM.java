/**
 * Shanoir NG - Import, manage and share neuroimaging data
 * Copyright (C) 2009-2019 Inria - https://www.inria.fr/
 * Contact us on https://project.inria.fr/shanoir/
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.html
 */

package org.shanoir.ng.studycard.model;

import org.dcm4che3.data.Tag;

/**
 * DICOM VM (Value Multiplicity)
 * 
 * distinct existing values :
 * 1, 1-n, 1-8, 2-n, 3-3n, 2, 4, 1-2, 1-3, 2-2n, 3, 6, 16, 1-n1, 1-32, 1-99, 3-n
 */
public class VM {

	private int min;

	private Cardinality max;

	private VM() {} 

	private VM(String str) {
		String[] split = str.split("-");
		if (split.length == 1) {
			int val = Integer.parseInt(str);
			this.min = val;
			this.max = new Cardinality(val);
		} else {
			this.min = Integer.parseInt(split[0]);
			this.max = new Cardinality(split[1]);
		}
	}
	
	public int getMin() {
		return min;
	}
	
	public void setMin(int min) {
		this.min = min;
	}
	
	public Cardinality getMax() {
		return max;
	}
	
	public void setMax(Cardinality max) {
		this.max = max;
	}
	
	public static VM of(int tag) {
		if (Tag.OffendingElement == tag) return new VM("1-n");
		if (Tag.AttributeIdentifierList == tag) return new VM("1-n");
		if (Tag.Overlays == tag) return new VM("1-n");
		if (Tag.FileSetDescriptorFileID == tag) return new VM("1-8");
		if (Tag.ReferencedFileID == tag) return new VM("1-8");
		if (Tag.ReferencedRelatedGeneralSOPClassUIDInFile == tag) return new VM("1-n");
		if (Tag.SpecificCharacterSet == tag) return new VM("1-n");
		if (Tag.ImageType == tag) return new VM("2-n");
		if (Tag.RelatedGeneralSOPClassUID == tag) return new VM("1-n");
		if (Tag.RetrieveAETitle == tag) return new VM("1-n");
		if (Tag.FailedSOPInstanceUIDList == tag) return new VM("1-n");
		if (Tag.ModalitiesInStudy == tag) return new VM("1-n");
		if (Tag.SOPClassesInStudy == tag) return new VM("1-n");
		if (Tag.ReferringPhysicianTelephoneNumbers == tag) return new VM("1-n");
		if (Tag.ConsultingPhysicianName == tag) return new VM("1-n");
		if (Tag.NonidentifyingPrivateElements == tag) return new VM("1-n");
		if (Tag.IdentifyingPrivateElements == tag) return new VM("1-n");
		if (Tag.PrivateDataElementValueMultiplicity == tag) return new VM("1-3");
		if (Tag.PrivateDataElementNumberOfItems == tag) return new VM("1-2");
		if (Tag.ExtendedMatchingMechanisms == tag) return new VM("1-n");
		if (Tag.PhysiciansOfRecord == tag) return new VM("1-n");
		if (Tag.PerformingPhysicianName == tag) return new VM("1-n");
		if (Tag.NameOfPhysiciansReadingStudy == tag) return new VM("1-n");
		if (Tag.OperatorsName == tag) return new VM("1-n");
		if (Tag.AdmittingDiagnosesDescription == tag) return new VM("1-n");
		if (Tag.SOPClassesSupported == tag) return new VM("1-n");
		if (Tag.ReferencedFrameNumber == tag) return new VM("1-n");
		if (Tag.SimpleFrameList == tag) return new VM("1-n");
		if (Tag.CalculatedFrameList == tag) return new VM("3-3n");
		if (Tag.TimeRange == tag) return new VM("2");
		if (Tag.EventElapsedTimes == tag) return new VM("1-n");
		if (Tag.EventTimerNames == tag) return new VM("1-n");
		if (Tag.AvailableTransferSyntaxUID == tag) return new VM("1-n");
		if (Tag.IrradiationEventUID == tag) return new VM("1-n");
		if (Tag.FrameType == tag) return new VM("4-5");
		if (Tag.SubjectRelativePositionInImage == tag) return new VM("3");
		if (Tag.OtherPatientIDs == tag) return new VM("1-n");
		if (Tag.OtherPatientNames == tag) return new VM("1-n");
		if (Tag.InsurancePlanIdentification == tag) return new VM("1-n");
		if (Tag.MedicalAlerts == tag) return new VM("1-n");
		if (Tag.Allergies == tag) return new VM("1-n");
		if (Tag.PatientTelephoneNumbers == tag) return new VM("1-n");
		if (Tag.DeidentificationMethod == tag) return new VM("1-n");
		if (Tag.MaterialThickness == tag) return new VM("1-n");
		if (Tag.MaterialPipeDiameter == tag) return new VM("1-n");
		if (Tag.MaterialIsolationDiameter == tag) return new VM("1-n");
		if (Tag.ComponentWelderIDs == tag) return new VM("1-n");
		if (Tag.OtherApprovalStatus == tag) return new VM("1-n");
		if (Tag.OtherSecondaryApprovalStatus == tag) return new VM("1-n");
		if (Tag.IndicationType == tag) return new VM("1-n");
		if (Tag.TransformOrderOfAxes == tag) return new VM("1-n");
		if (Tag.CoordinateSystemTransformRotationAndScaleMatrix == tag) return new VM("1-n");
		if (Tag.CoordinateSystemTransformTranslationMatrix == tag) return new VM("1-n");
		if (Tag.DACGainPoints == tag) return new VM("1-n");
		if (Tag.DACTimePoints == tag) return new VM("1-n");
		if (Tag.DACAmplitude == tag) return new VM("1-n");
		if (Tag.CalibrationTime == tag) return new VM("1-n");
		if (Tag.CalibrationDate == tag) return new VM("1-n");
		if (Tag.ImageQualityIndicatorType == tag) return new VM("1-n");
		if (Tag.ImageQualityIndicatorMaterial == tag) return new VM("1-n");
		if (Tag.ImageQualityIndicatorSize == tag) return new VM("1-n");
		if (Tag.PrimaryChromaticities == tag) return new VM("3");
		if (Tag.OECFColumnNames == tag) return new VM("1-n");
		if (Tag.OECFValues == tag) return new VM("1-n");
		if (Tag.SpatialFrequencyResponseColumnNames == tag) return new VM("1-n");
		if (Tag.SpatialFrequencyResponseValues == tag) return new VM("1-n");
		if (Tag.ColorFilterArrayPatternValues == tag) return new VM("1-n");
		if (Tag.SubjectArea == tag) return new VM("2-4");
		if (Tag.FlashEnergy == tag) return new VM("1-2");
		if (Tag.SubjectLocation == tag) return new VM("2");
		if (Tag.LensSpecification == tag) return new VM("4");
		if (Tag.GPSLatitude == tag) return new VM("3");
		if (Tag.GPSLongitude == tag) return new VM("3");
		if (Tag.GPSDestLatitude == tag) return new VM("3");
		if (Tag.GPSDestLongitude == tag) return new VM("3");
		if (Tag.ImmersionMedia == tag) return new VM("1-n");
		if (Tag.ScanningSequence == tag) return new VM("1-n");
		if (Tag.SequenceVariant == tag) return new VM("1-n");
		if (Tag.ScanOptions == tag) return new VM("1-n");
		if (Tag.Radionuclide == tag) return new VM("1-n");
		if (Tag.EnergyWindowTotalWidth == tag) return new VM("1-n");
		if (Tag.EchoNumbers == tag) return new VM("1-n");
		if (Tag.ManufacturerDeviceClassUID == tag) return new VM("1-n");
		if (Tag.SecondaryCaptureDeviceSoftwareVersions == tag) return new VM("1-n");
		if (Tag.HardcopyDeviceSoftwareVersion == tag) return new VM("1-n");
		if (Tag.SoftwareVersions == tag) return new VM("1-n");
		if (Tag.ContrastFlowRate == tag) return new VM("1-n");
		if (Tag.ContrastFlowDuration == tag) return new VM("1-n");
		if (Tag.FrameTimeVector == tag) return new VM("1-n");
		if (Tag.SynchronizationChannel == tag) return new VM("2");
		if (Tag.TableVerticalIncrement == tag) return new VM("1-n");
		if (Tag.TableLateralIncrement == tag) return new VM("1-n");
		if (Tag.TableLongitudinalIncrement == tag) return new VM("1-n");
		if (Tag.RadialPosition == tag) return new VM("1-n");
		if (Tag.RotationOffset == tag) return new VM("1-n");
		if (Tag.FieldOfViewDimensions == tag) return new VM("1-2");
		if (Tag.TypeOfFilters == tag) return new VM("1-n");
		if (Tag.ImagerPixelSpacing == tag) return new VM("2");
		if (Tag.Grid == tag) return new VM("1-n");
		if (Tag.FocalDistance == tag) return new VM("1-2");
		if (Tag.XFocusCenter == tag) return new VM("1-2");
		if (Tag.YFocusCenter == tag) return new VM("1-2");
		if (Tag.FocalSpots == tag) return new VM("1-n");
		if (Tag.DateOfLastCalibration == tag) return new VM("1-n");
		if (Tag.TimeOfLastCalibration == tag) return new VM("1-n");
		if (Tag.ConvolutionKernel == tag) return new VM("1-n");
		if (Tag.UpperLowerPixelValues == tag) return new VM("1-n");
		if (Tag.WholeBodyTechnique == tag) return new VM("1-n");
		if (Tag.AcquisitionMatrix == tag) return new VM("4");
		if (Tag.PositionerPrimaryAngleIncrement == tag) return new VM("1-n");
		if (Tag.PositionerSecondaryAngleIncrement == tag) return new VM("1-n");
		if (Tag.ShutterShape == tag) return new VM("1-3");
		if (Tag.CenterOfCircularShutter == tag) return new VM("2");
		if (Tag.VerticesOfThePolygonalShutter == tag) return new VM("2-2n");
		if (Tag.ShutterPresentationColorCIELabValue == tag) return new VM("3");
		if (Tag.CenterOfCircularOutline == tag) return new VM("2");
		if (Tag.CollimatorShape == tag) return new VM("1-3");
		if (Tag.CenterOfCircularCollimator == tag) return new VM("2");
		if (Tag.VerticesOfThePolygonalCollimator == tag) return new VM("2-2n");
		if (Tag.PageNumberVector == tag) return new VM("1-n");
		if (Tag.FrameLabelVector == tag) return new VM("1-n");
		if (Tag.FramePrimaryAngleVector == tag) return new VM("1-n");
		if (Tag.FrameSecondaryAngleVector == tag) return new VM("1-n");
		if (Tag.SliceLocationVector == tag) return new VM("1-n");
		if (Tag.DisplayWindowLabelVector == tag) return new VM("1-n");
		if (Tag.NominalScannedPixelSpacing == tag) return new VM("2");
		if (Tag.LocalizingCursorPosition == tag) return new VM("2");
		if (Tag.CalculatedTargetPosition == tag) return new VM("3");
		if (Tag.LesionNumber == tag) return new VM("1-n");
		if (Tag.OutputPower == tag) return new VM("1-n");
		if (Tag.TransducerData == tag) return new VM("1-n");
		if (Tag.ImageTransformationMatrix == tag) return new VM("6");
		if (Tag.ImageTranslationVector == tag) return new VM("3");
		if (Tag.TableOfXBreakPoints == tag) return new VM("1-n");
		if (Tag.TableOfYBreakPoints == tag) return new VM("1-n");
		if (Tag.TableOfPixelValues == tag) return new VM("1-n");
		if (Tag.TableOfParameterValues == tag) return new VM("1-n");
		if (Tag.RWaveTimeVector == tag) return new VM("1-n");
		if (Tag.DetectorBinning == tag) return new VM("2");
		if (Tag.DetectorElementPhysicalSize == tag) return new VM("2");
		if (Tag.DetectorElementSpacing == tag) return new VM("2");
		if (Tag.DetectorActiveDimensions == tag) return new VM("1-2");
		if (Tag.DetectorActiveOrigin == tag) return new VM("2");
		if (Tag.FieldOfViewOrigin == tag) return new VM("2");
		if (Tag.PixelDataAreaOriginRelativeToFOV == tag) return new VM("2");
		if (Tag.GridAspectRatio == tag) return new VM("2");
		if (Tag.FilterMaterial == tag) return new VM("1-n");
		if (Tag.FilterThicknessMinimum == tag) return new VM("1-n");
		if (Tag.FilterThicknessMaximum == tag) return new VM("1-n");
		if (Tag.FilterBeamPathLengthMinimum == tag) return new VM("1-n");
		if (Tag.FilterBeamPathLengthMaximum == tag) return new VM("1-n");
		if (Tag.SpectralWidth == tag) return new VM("1-2");
		if (Tag.ChemicalShiftReference == tag) return new VM("1-2");
		if (Tag.DecoupledNucleus == tag) return new VM("1-2");
		if (Tag.DecouplingFrequency == tag) return new VM("1-2");
		if (Tag.DecouplingChemicalShiftReference == tag) return new VM("1-2");
		if (Tag.TimeDomainFiltering == tag) return new VM("1-2");
		if (Tag.NumberOfZeroFills == tag) return new VM("1-2");
		if (Tag.InversionTimes == tag) return new VM("1-n");
		if (Tag.DiffusionGradientOrientation == tag) return new VM("3");
		if (Tag.VelocityEncodingDirection == tag) return new VM("3");
		if (Tag.TransmitterFrequency == tag) return new VM("1-2");
		if (Tag.ResonantNucleus == tag) return new VM("1-2");
		if (Tag.SlabOrientation == tag) return new VM("3");
		if (Tag.MidSlabPosition == tag) return new VM("3");
		if (Tag.ASLSlabOrientation == tag) return new VM("3");
		if (Tag.ASLMidSlabPosition == tag) return new VM("3");
		if (Tag.DataCollectionCenterPatient == tag) return new VM("3");
		if (Tag.ReconstructionFieldOfView == tag) return new VM("2");
		if (Tag.ReconstructionTargetCenterPatient == tag) return new VM("3");
		if (Tag.ReconstructionPixelSpacing == tag) return new VM("2");
		if (Tag.ExposureModulationType == tag) return new VM("1-n");
		if (Tag.CalciumScoringMassFactorDevice == tag) return new VM("3");
		if (Tag.ReferencedXRayDetectorIndex == tag) return new VM("1-n");
		if (Tag.ReferencedXRaySourceIndex == tag) return new VM("1-n");
		if (Tag.ReferencedPathIndex == tag) return new VM("1-n");
		if (Tag.ObjectPixelSpacingInCenterOfBeam == tag) return new VM("2");
		if (Tag.IntensifierActiveDimensions == tag) return new VM("1-2");
		if (Tag.PhysicalDetectorSize == tag) return new VM("2");
		if (Tag.PositionOfIsocenterProjection == tag) return new VM("2");
		if (Tag.CenterOfCircularExposureControlSensingRegion == tag) return new VM("2");
		if (Tag.VerticesOfThePolygonalExposureControlSensingRegion == tag) return new VM("2-n");
		if (Tag.FieldOfViewDimensionsInFloat == tag) return new VM("1-2");
		if (Tag.DetectorActiveAreaTLHCPosition == tag) return new VM("3");
		if (Tag.DetectorActiveAreaOrientation == tag) return new VM("6");
		if (Tag.DepthsOfFocus == tag) return new VM("1-n");
		if (Tag.PotentialReasonsForProcedure == tag) return new VM("1-n");
		if (Tag.PotentialDiagnosticTasks == tag) return new VM("1-n");
		if (Tag.SourceAcquisitionProtocolElementNumber == tag) return new VM("1-n");
		if (Tag.SourceAcquisitionBeamNumber == tag) return new VM("1-n");
		if (Tag.SourceReconstructionProtocolElementNumber == tag) return new VM("1-n");
		if (Tag.PatientOrientation == tag) return new VM("2");
		if (Tag.ImagePosition == tag) return new VM("3");
		if (Tag.ImagePositionPatient == tag) return new VM("3");
		if (Tag.ImageOrientation == tag) return new VM("6");
		if (Tag.ImageOrientationPatient == tag) return new VM("6");
		if (Tag.MaskingImage == tag) return new VM("1-n");
		if (Tag.Reference == tag) return new VM("1-n");
		if (Tag.OtherStudyNumbers == tag) return new VM("1-n");
		if (Tag.SourceImageIDs == tag) return new VM("1-n");
		if (Tag.OriginalImageIdentification == tag) return new VM("1-n");
		if (Tag.OriginalImageIdentificationNomenclature == tag) return new VM("1-n");
		if (Tag.DimensionIndexValues == tag) return new VM("1-n");
		if (Tag.ImagePositionVolume == tag) return new VM("3");
		if (Tag.ImageOrientationVolume == tag) return new VM("6");
		if (Tag.ApexPosition == tag) return new VM("3");
		if (Tag.VolumeToTransducerMappingMatrix == tag) return new VM("16");
		if (Tag.VolumeToTableMappingMatrix == tag) return new VM("16");
		if (Tag.AcquisitionIndex == tag) return new VM("1-n");
		if (Tag.LightPathFilterPassBand == tag) return new VM("2");
		if (Tag.ImagePathFilterPassBand == tag) return new VM("2");
		if (Tag.ReferenceCoordinates == tag) return new VM("2-2n");
		if (Tag.AnatomicStructureReferencePoint == tag) return new VM("2");
		if (Tag.RegisteredLocalizerTopLeftHandCorner == tag) return new VM("2");
		if (Tag.RegisteredLocalizerBottomRightHandCorner == tag) return new VM("2");
		if (Tag.BscanCycleTimeVector == tag) return new VM("1-n");
		if (Tag.FrameIncrementPointer == tag) return new VM("1-n");
		if (Tag.FrameDimensionPointer == tag) return new VM("1-n");
		if (Tag.PixelSpacing == tag) return new VM("2");
		if (Tag.ZoomFactor == tag) return new VM("2");
		if (Tag.ZoomCenter == tag) return new VM("2");
		if (Tag.PixelAspectRatio == tag) return new VM("2");
		if (Tag.ManipulatedImage == tag) return new VM("1-n");
		if (Tag.CorrectedImage == tag) return new VM("1-n");
		if (Tag.CompressionSequence == tag) return new VM("1-n");
		if (Tag.CompressionStepPointers == tag) return new VM("1-n");
		if (Tag.PerimeterTable == tag) return new VM("1-n");
		if (Tag.PredictorConstants == tag) return new VM("1-n");
		if (Tag.SequenceOfCompressedData == tag) return new VM("1-n");
		if (Tag.DetailsOfCoefficients == tag) return new VM("1-n");
		if (Tag.CoefficientCoding == tag) return new VM("1-n");
		if (Tag.CoefficientCodingPointers == tag) return new VM("1-n");
		if (Tag.DataBlockDescription == tag) return new VM("1-n");
		if (Tag.DataBlock == tag) return new VM("1-n");
		if (Tag.ZonalMapLocation == tag) return new VM("1-n");
		if (Tag.CodeLabel == tag) return new VM("1-n");
		if (Tag.CodeTableLocation == tag) return new VM("1-n");
		if (Tag.ImageDataLocation == tag) return new VM("1-n");
		if (Tag.WindowCenter == tag) return new VM("1-n");
		if (Tag.WindowWidth == tag) return new VM("1-n");
		if (Tag.WindowCenterWidthExplanation == tag) return new VM("1-n");
		if (Tag.GrayLookupTableDescriptor == tag) return new VM("3");
		if (Tag.RedPaletteColorLookupTableDescriptor == tag) return new VM("3");
		if (Tag.GreenPaletteColorLookupTableDescriptor == tag) return new VM("3");
		if (Tag.BluePaletteColorLookupTableDescriptor == tag) return new VM("3");
		if (Tag.AlphaPaletteColorLookupTableDescriptor == tag) return new VM("3");
		if (Tag.LargeRedPaletteColorLookupTableDescriptor == tag) return new VM("4");
		if (Tag.LargeGreenPaletteColorLookupTableDescriptor == tag) return new VM("4");
		if (Tag.LargeBluePaletteColorLookupTableDescriptor == tag) return new VM("4");
		if (Tag.GrayLookupTableData == tag) return new VM("1-n");
		if (Tag.BlendingLookupTableDescriptor == tag) return new VM("3");
		if (Tag.LossyImageCompressionRatio == tag) return new VM("1-n");
		if (Tag.LossyImageCompressionMethod == tag) return new VM("1-n");
		if (Tag.LUTDescriptor == tag) return new VM("3");
		if (Tag.LUTData == tag) return new VM("1-n");
		if (Tag.FrameNumbersOfInterest == tag) return new VM("1-n");
		if (Tag.FrameOfInterestDescription == tag) return new VM("1-n");
		if (Tag.FrameOfInterestType == tag) return new VM("1-n");
		if (Tag.MaskPointers == tag) return new VM("1-n");
		if (Tag.RWavePointer == tag) return new VM("1-n");
		if (Tag.ApplicableFrameRange == tag) return new VM("2-2n");
		if (Tag.MaskFrameNumbers == tag) return new VM("1-n");
		if (Tag.MaskSubPixelShift == tag) return new VM("2");
		if (Tag.MeasurementFunctions == tag) return new VM("1-n");
		if (Tag.CIExyWhitePoint == tag) return new VM("2");
		if (Tag.MeasuredCharacteristics == tag) return new VM("1-n");
		if (Tag.ImageProcessingApplied == tag) return new VM("1-n");
		if (Tag.VerticesOfTheRegion == tag) return new VM("2-2n");
		if (Tag.PixelShiftFrameRange == tag) return new VM("2-2n");
		if (Tag.LUTFrameRange == tag) return new VM("2-2n");
		if (Tag.ImageToEquipmentMappingMatrix == tag) return new VM("16");
		if (Tag.ScheduledStudyLocationAETitle == tag) return new VM("1-n");
		if (Tag.ChannelStatus == tag) return new VM("1-n");
		if (Tag.WaveformDisplayBackgroundCIELabValue == tag) return new VM("3");
		if (Tag.ChannelRecommendedDisplayCIELabValue == tag) return new VM("3");
		if (Tag.ScheduledStationAETitle == tag) return new VM("1-n");
		if (Tag.ScheduledStationName == tag) return new VM("1-n");
		if (Tag.ExposedArea == tag) return new VM("1-2");
		if (Tag.NamesOfIntendedRecipientsOfResults == tag) return new VM("1-n");
		if (Tag.PersonTelephoneNumbers == tag) return new VM("1-n");
		if (Tag.RealWorldValueLUTData == tag) return new VM("1-n");
		if (Tag.UrgencyOrPriorityAlertsTrial == tag) return new VM("1-n");
		if (Tag.ReferencedWaveformChannels == tag) return new VM("2-2n");
		if (Tag.ReportStatusIDTrial == tag) return new VM("2");
		if (Tag.ReferencedSamplePositions == tag) return new VM("1-n");
		if (Tag.ReferencedFrameNumbers == tag) return new VM("1-n");
		if (Tag.ReferencedTimeOffsets == tag) return new VM("1-n");
		if (Tag.ReferencedDateTime == tag) return new VM("1-n");
		if (Tag.FloatingPointValue == tag) return new VM("1-n");
		if (Tag.RationalNumeratorValue == tag) return new VM("1-n");
		if (Tag.RationalDenominatorValue == tag) return new VM("1-n");
		if (Tag.PixelCoordinatesSetTrial == tag) return new VM("2-2n");
		if (Tag.NumericValue == tag) return new VM("1-n");
		if (Tag.ReferencedContentItemIdentifier == tag) return new VM("1-n");
		if (Tag.ListOfMIMETypes == tag) return new VM("1-n");
		if (Tag.ProductName == tag) return new VM("1-n");
		if (Tag.VisualAcuityModifiers == tag) return new VM("2");
		if (Tag.CornealVertexLocation == tag) return new VM("2");
		if (Tag.VerticesOfTheOutlineOfPupil == tag) return new VM("2-2n");
		if (Tag.MaximumCornealCurvatureLocation == tag) return new VM("2");
		if (Tag.CornealPointLocation == tag) return new VM("3");
		if (Tag.RecommendedAbsentPixelCIELabValue == tag) return new VM("3");
		if (Tag.ImageOrientationSlide == tag) return new VM("6");
		if (Tag.TopLeftHandCornerOfLocalizerArea == tag) return new VM("2");
		if (Tag.BottomRightHandCornerOfLocalizerArea == tag) return new VM("2");
		if (Tag.EnergyWindowVector == tag) return new VM("1-n");
		if (Tag.DetectorVector == tag) return new VM("1-n");
		if (Tag.PhaseVector == tag) return new VM("1-n");
		if (Tag.RotationVector == tag) return new VM("1-n");
		if (Tag.RRIntervalVector == tag) return new VM("1-n");
		if (Tag.TimeSlotVector == tag) return new VM("1-n");
		if (Tag.SliceVector == tag) return new VM("1-n");
		if (Tag.AngularViewVector == tag) return new VM("1-n");
		if (Tag.TimeSliceVector == tag) return new VM("1-n");
		if (Tag.TriggerVector == tag) return new VM("1-n");
		if (Tag.SeriesType == tag) return new VM("2");
		if (Tag.AxialMash == tag) return new VM("2");
		if (Tag.DetectorElementSize == tag) return new VM("2");
		if (Tag.SecondaryCountsType == tag) return new VM("1-n");
		if (Tag.SecondaryCountsAccumulated == tag) return new VM("1-n");
		if (Tag.CountsIncluded == tag) return new VM("1-n");
		if (Tag.HistogramData == tag) return new VM("1-n");
		if (Tag.SegmentAlgorithmName == tag) return new VM("1-n");
		if (Tag.ReferencedSegmentNumber == tag) return new VM("1-n");
		if (Tag.RecommendedDisplayCIELabValue == tag) return new VM("3");
		if (Tag.GridDimensions == tag) return new VM("3");
		if (Tag.GridResolution == tag) return new VM("3");
		if (Tag.PointPositionAccuracy == tag) return new VM("3");
		if (Tag.PointsBoundingBoxCoordinates == tag) return new VM("6");
		if (Tag.AxisOfRotation == tag) return new VM("3");
		if (Tag.CenterOfRotation == tag) return new VM("3");
		if (Tag.VectorAccuracy == tag) return new VM("1-n");
		if (Tag.RecommendedRotationPoint == tag) return new VM("2");
		if (Tag.BoundingRectangle == tag) return new VM("4");
		if (Tag.ImplantTemplate3DModelSurfaceNumber == tag) return new VM("1-n");
		if (Tag.TwoDMatingPoint == tag) return new VM("2");
		if (Tag.TwoDMatingAxes == tag) return new VM("4");
		if (Tag.ThreeDDegreeOfFreedomAxis == tag) return new VM("3");
		if (Tag.RangeOfFreedom == tag) return new VM("2");
		if (Tag.ThreeDMatingPoint == tag) return new VM("3");
		if (Tag.ThreeDMatingAxes == tag) return new VM("9");
		if (Tag.TwoDDegreeOfFreedomAxis == tag) return new VM("3");
		if (Tag.TwoDPointCoordinates == tag) return new VM("2");
		if (Tag.ThreeDPointCoordinates == tag) return new VM("3");
		if (Tag.TwoDLineCoordinates == tag) return new VM("4");
		if (Tag.ThreeDLineCoordinates == tag) return new VM("6");
		if (Tag.TwoDPlaneIntersection == tag) return new VM("4");
		if (Tag.ThreeDPlaneOrigin == tag) return new VM("3");
		if (Tag.ThreeDPlaneNormal == tag) return new VM("3");
		if (Tag.ReferencedOpticalPathIdentifier == tag) return new VM("1-n");
		if (Tag.CommonZCoordinateValue == tag) return new VM("1-n");
		if (Tag.BoundingBoxTopLeftHandCorner == tag) return new VM("2");
		if (Tag.BoundingBoxBottomRightHandCorner == tag) return new VM("2");
		if (Tag.AnchorPoint == tag) return new VM("2");
		if (Tag.GraphicData == tag) return new VM("2-n");
		if (Tag.DisplayedAreaTopLeftHandCornerTrial == tag) return new VM("2");
		if (Tag.DisplayedAreaBottomRightHandCornerTrial == tag) return new VM("2");
		if (Tag.DisplayedAreaTopLeftHandCorner == tag) return new VM("2");
		if (Tag.DisplayedAreaBottomRightHandCorner == tag) return new VM("2");
		if (Tag.GraphicLayerRecommendedDisplayRGBValue == tag) return new VM("3");
		if (Tag.PresentationPixelSpacing == tag) return new VM("2");
		if (Tag.PresentationPixelAspectRatio == tag) return new VM("2");
		if (Tag.TextColorCIELabValue == tag) return new VM("3");
		if (Tag.ShadowColorCIELabValue == tag) return new VM("3");
		if (Tag.PatternOnColorCIELabValue == tag) return new VM("3");
		if (Tag.PatternOffColorCIELabValue == tag) return new VM("3");
		if (Tag.RotationPoint == tag) return new VM("2");
		if (Tag.FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix == tag) return new VM("16");
		if (Tag.GraphicLayerRecommendedDisplayCIELabValue == tag) return new VM("3");
		if (Tag.CroppingSpecificationIndex == tag) return new VM("1-n");
		if (Tag.GlobalCroppingSpecificationIndex == tag) return new VM("1-n");
		if (Tag.BoundingBoxCrop == tag) return new VM("6");
		if (Tag.Plane == tag) return new VM("4");
		if (Tag.PlaneNormal == tag) return new VM("3");
		if (Tag.MPRTopLeftHandCorner == tag) return new VM("3");
		if (Tag.MPRViewWidthDirection == tag) return new VM("3");
		if (Tag.MPRViewHeightDirection == tag) return new VM("3");
		if (Tag.ViewpointPosition == tag) return new VM("3");
		if (Tag.ViewpointLookAtPoint == tag) return new VM("3");
		if (Tag.ViewpointUpDirection == tag) return new VM("3");
		if (Tag.RenderFieldOfView == tag) return new VM("6");
		if (Tag.LightDirection == tag) return new VM("3");
		if (Tag.WeightingLookupTableDescriptor == tag) return new VM("3");
		if (Tag.RelativeTime == tag) return new VM("2");
		if (Tag.AbstractPriorValue == tag) return new VM("2");
		if (Tag.SelectorSequencePointer == tag) return new VM("1-n");
		if (Tag.SelectorSequencePointerPrivateCreator == tag) return new VM("1-n");
		if (Tag.SelectorAEValue == tag) return new VM("1-n");
		if (Tag.SelectorASValue == tag) return new VM("1-n");
		if (Tag.SelectorATValue == tag) return new VM("1-n");
		if (Tag.SelectorDAValue == tag) return new VM("1-n");
		if (Tag.SelectorCSValue == tag) return new VM("1-n");
		if (Tag.SelectorDTValue == tag) return new VM("1-n");
		if (Tag.SelectorISValue == tag) return new VM("1-n");
		if (Tag.SelectorLOValue == tag) return new VM("1-n");
		if (Tag.SelectorPNValue == tag) return new VM("1-n");
		if (Tag.SelectorTMValue == tag) return new VM("1-n");
		if (Tag.SelectorSHValue == tag) return new VM("1-n");
		if (Tag.SelectorUCValue == tag) return new VM("1-n");
		if (Tag.SelectorDSValue == tag) return new VM("1-n");
		if (Tag.SelectorFDValue == tag) return new VM("1-n");
		if (Tag.SelectorFLValue == tag) return new VM("1-n");
		if (Tag.SelectorULValue == tag) return new VM("1-n");
		if (Tag.SelectorUSValue == tag) return new VM("1-n");
		if (Tag.SelectorSLValue == tag) return new VM("1-n");
		if (Tag.SelectorSSValue == tag) return new VM("1-n");
		if (Tag.SelectorUIValue == tag) return new VM("1-n");
		if (Tag.SelectorSVValue == tag) return new VM("1-n");
		if (Tag.SelectorUVValue == tag) return new VM("1-n");
		if (Tag.DisplayEnvironmentSpatialPosition == tag) return new VM("4");
		if (Tag.DisplaySetScrollingGroup == tag) return new VM("2-n");
		if (Tag.ReferenceDisplaySets == tag) return new VM("1-n");
		if (Tag.StructuredDisplayBackgroundCIELabValue == tag) return new VM("3");
		if (Tag.EmptyImageBoxCIELabValue == tag) return new VM("3");
		if (Tag.SynchronizedImageBoxList == tag) return new VM("2-n");
		if (Tag.ThreeDRenderingType == tag) return new VM("1-n");
		if (Tag.DisplaySetPatientOrientation == tag) return new VM("2");
		if (Tag.DoubleExposureFieldDeltaTrial == tag) return new VM("4");
		if (Tag.SelectorSequencePointerItems == tag) return new VM("1-n");
		if (Tag.DoubleExposureFieldDelta == tag) return new VM("4");
		if (Tag.ThreeDImplantTemplateGroupMemberMatchingPoint == tag) return new VM("3");
		if (Tag.ThreeDImplantTemplateGroupMemberMatchingAxes == tag) return new VM("9");
		if (Tag.TwoDImplantTemplateGroupMemberMatchingPoint == tag) return new VM("2");
		if (Tag.TwoDImplantTemplateGroupMemberMatchingAxes == tag) return new VM("4");
		if (Tag.SurfacePointPresentationValueData == tag) return new VM("1-n");
		if (Tag.SurfacePointColorCIELabValueData == tag) return new VM("3-3n");
		if (Tag.TopicKeywords == tag) return new VM("1-32");
		if (Tag.DataElementsSigned == tag) return new VM("1-n");
		if (Tag.EscapeTriplet == tag) return new VM("3");
		if (Tag.RunLengthTriplet == tag) return new VM("3");
		if (Tag.HuffmanTableTriplet == tag) return new VM("3");
		if (Tag.ShiftTableTriplet == tag) return new VM("3");
		if (Tag.ZonalMap == tag) return new VM("1-n");
		if (Tag.OtherMagnificationTypesAvailable == tag) return new VM("1-n");
		if (Tag.OtherSmoothingTypesAvailable == tag) return new VM("1-n");
		if (Tag.PrinterPixelSpacing == tag) return new VM("2");
		if (Tag.ReferencedOverlayPlaneGroups == tag) return new VM("1-99");
		if (Tag.FailureAttributes == tag) return new VM("1-n");
		if (Tag.XRayImageReceptorTranslation == tag) return new VM("3");
		if (Tag.RTImageOrientation == tag) return new VM("6");
		if (Tag.ImagePlanePixelSpacing == tag) return new VM("2");
		if (Tag.RTImagePosition == tag) return new VM("2");
		if (Tag.DiaphragmPosition == tag) return new VM("4");
		if (Tag.DevicePositionToEquipmentMappingMatrix == tag) return new VM("16");
		if (Tag.NormalizationPoint == tag) return new VM("3");
		if (Tag.GridFrameOffsetVector == tag) return new VM("2-n");
		if (Tag.TissueHeterogeneityCorrection == tag) return new VM("1-3");
		if (Tag.DVHNormalizationPoint == tag) return new VM("3");
		if (Tag.DVHData == tag) return new VM("2-2n");
		if (Tag.ROIDisplayColor == tag) return new VM("3");
		if (Tag.ContourOffsetVector == tag) return new VM("3");
		if (Tag.AttachedContours == tag) return new VM("1-n");
		if (Tag.ContourData == tag) return new VM("3-3n");
		if (Tag.FrameOfReferenceTransformationMatrix == tag) return new VM("16");
		if (Tag.ScanSpotMetersetsDelivered == tag) return new VM("1-n");
		if (Tag.ParallelRTBeamDelimiterOpeningExtents == tag) return new VM("2-2n");
		if (Tag.TreatmentProtocols == tag) return new VM("1-n");
		if (Tag.TreatmentSites == tag) return new VM("1-n");
		if (Tag.DoseReferencePointCoordinates == tag) return new VM("3");
		if (Tag.BeamDoseSpecificationPoint == tag) return new VM("3");
		if (Tag.BrachyApplicationSetupDoseSpecificationPoint == tag) return new VM("3");
		if (Tag.LeafPositionBoundaries == tag) return new VM("3-n");
		if (Tag.ImagingDeviceSpecificAcquisitionParameters == tag) return new VM("1-n");
		if (Tag.CompensatorPixelSpacing == tag) return new VM("2");
		if (Tag.CompensatorPosition == tag) return new VM("2");
		if (Tag.CompensatorTransmissionData == tag) return new VM("1-n");
		if (Tag.CompensatorThicknessData == tag) return new VM("1-n");
		if (Tag.BlockData == tag) return new VM("2-2n");
		if (Tag.LeafJawPositions == tag) return new VM("2-2n");
		if (Tag.IsocenterPosition == tag) return new VM("3");
		if (Tag.SurfaceEntryPoint == tag) return new VM("3");
		if (Tag.ExternalContourEntryPoint == tag) return new VM("3");
		if (Tag.ControlPoint3DPosition == tag) return new VM("3");
		if (Tag.SourceToCompensatorDistance == tag) return new VM("1-n");
		if (Tag.IsocenterToCompensatorDistances == tag) return new VM("1-n");
		if (Tag.VirtualSourceAxisDistances == tag) return new VM("2");
		if (Tag.ScanSpotTimeOffset == tag) return new VM("1-n");
		if (Tag.ScanSpotPrescribedIndices == tag) return new VM("1-n");
		if (Tag.ScanSpotPositionMap == tag) return new VM("1-n");
		if (Tag.ScanSpotMetersetWeights == tag) return new VM("1-n");
		if (Tag.ScanningSpotSize == tag) return new VM("2");
		if (Tag.ScanSpotSizesDelivered == tag) return new VM("2-2n");
		if (Tag.ControlPointOrientation == tag) return new VM("3");
		if (Tag.NominalRangeModulationFractions == tag) return new VM("2");
		if (Tag.NominalRangeModulatedRegionDepths == tag) return new VM("2");
		if (Tag.DeliveredNominalRangeModulationFractions == tag) return new VM("2");
		if (Tag.DeliveredNominalRangeModulatedRegionDepths == tag) return new VM("2");
		if (Tag.DoseValuePurpose == tag) return new VM("1-n");
		if (Tag.ReferenceDosePointCoordinates == tag) return new VM("3");
		if (Tag.RadiationDoseCentralAxisDisplacement == tag) return new VM("2");
		if (Tag.RadiationDoseMeasurementPointCoordinates == tag) return new VM("3");
		if (Tag.ParallelRTBeamDelimiterBoundaries == tag) return new VM("2-n");
		if (Tag.ParallelRTBeamDelimiterPositions == tag) return new VM("2-n");
		if (Tag.RTBeamLimitingDeviceOffset == tag) return new VM("2");
		if (Tag.ParallelRTBeamDelimiterLeafMountingSide == tag) return new VM("1-n");
		if (Tag.DisplacementMatrix == tag) return new VM("16");
		if (Tag.DelineatedRadiationFieldSize == tag) return new VM("2");
		if (Tag.TeletherapyRadiationType == tag) return new VM("1-n");
		if (Tag.BrachytherapySourceType == tag) return new VM("1-n");
		if (Tag.PertinentSOPClassesInStudy == tag) return new VM("1-n");
		if (Tag.PertinentSOPClassesInSeries == tag) return new VM("1-n");
		if (Tag.IntendedFractionStartTime == tag) return new VM("1-n");
		if (Tag.RTTreatmentSourceCoordinates == tag) return new VM("3");
		if (Tag.TomotherapeuticLeafOpenDurations == tag) return new VM("1-n");
		if (Tag.TomotherapeuticLeafInitialClosedDurations == tag) return new VM("1-n");
		if (Tag.ThreatROIBase == tag) return new VM("3");
		if (Tag.ThreatROIExtents == tag) return new VM("3");
		if (Tag.CenterOfMass == tag) return new VM("3");
		if (Tag.CenterOfPTO == tag) return new VM("3");
		if (Tag.BoundingPolygon == tag) return new VM("6-n");
		if (Tag.AbortReason == tag) return new VM("1-n");
		if (Tag.ThreatDetectionAlgorithmAndVersion == tag) return new VM("1-n");
		if (Tag.OOISize == tag) return new VM("3");
		if (Tag.SourceOrientation == tag) return new VM("3");
		if (Tag.SourcePosition == tag) return new VM("3");
		if (Tag.AnomalyLocatorIndicator == tag) return new VM("3");
		if (Tag.PRCSToRCSOrientation == tag) return new VM("6");
		if (Tag.AxisUnits == tag) return new VM("1-n");
		if (Tag.AxisLabels == tag) return new VM("1-n");
		if (Tag.MinimumCoordinateValue == tag) return new VM("1-n");
		if (Tag.MaximumCoordinateValue == tag) return new VM("1-n");
		if (Tag.CurveRange == tag) return new VM("1-n");
		if (Tag.CurveDataDescriptor == tag) return new VM("1-n");
		if (Tag.CoordinateStartValue == tag) return new VM("1-n");
		if (Tag.CoordinateStepValue == tag) return new VM("1-n");
		if (Tag.OverlayOrigin == tag) return new VM("2");
		if (Tag.OverlayCompressionStepPointers == tag) return new VM("1-n");
		if (Tag.OverlayCodeLabel == tag) return new VM("1-n");
		if (Tag.OverlayCodeTableLocation == tag) return new VM("1-n");
		if (Tag.OverlaysGray == tag) return new VM("1-n");
		if (Tag.OverlaysRed == tag) return new VM("1-n");
		if (Tag.OverlaysGreen == tag) return new VM("1-n");
		if (Tag.OverlaysBlue == tag) return new VM("1-n");
		else return new VM("1");
	}
}


