/**
 * Shanoir NG - Import, manage and share neuroimaging data
 * Copyright (C) 2009-2019 Inria - https://www.inria.fr/
 * Contact us on https://project.inria.fr/shanoir/
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.html
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.shanoir.ng.solr.repository;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.shanoir.ng.solr.model.ShanoirMetadata;
import org.springframework.stereotype.Component;

/**
 * @author yyao
 *
 */

@Component
public class ShanoirMetadataRepositoryImpl implements ShanoirMetadataRepositoryCustom {
	@PersistenceContext
	private EntityManager em;
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ShanoirMetadata> findAllAsSolrDoc() {
		List<ShanoirMetadata> result = new ArrayList<>();
		Query mrQuery = em.createNativeQuery("select d.id as datasetId, dm.name as datasetName, dm.dataset_modality_type as datasetType, mdm.mr_dataset_nature as datasetNature, "
				+ "d.creation_date as datasetCreationDate, e.comment as examinationComment, e.examination_date as examinationDate, su.name as subjectName, st.name as studyName, "
				+ "d.study_id as studyId from dataset d LEFT JOIN study st ON st.id = d.study_id LEFT JOIN subject su ON su.id = d.subject_id, dataset_metadata dm, "
				+ "dataset_acquisition da, examination e, mr_dataset md LEFT JOIN mr_dataset_metadata mdm ON md.updated_mr_metadata_id = mdm.id "
				+ "where d.updated_metadata_id = dm.id and da.id = d.dataset_acquisition_id and da.examination_id = e.id and md.id = d.id;", "SolrResult");
		Query petQuery = em.createNativeQuery("select d.id as datasetId, dm.name as datasetName, dm.dataset_modality_type as datasetType, null as datasetNature, "
				+ "d.creation_date as datasetCreationDate, e.comment as examinationComment, e.examination_date as examinationDate, su.name as subjectName, st.name as studyName, "
				+ "d.study_id as studyId from dataset d LEFT JOIN study st ON st.id = d.study_id LEFT JOIN subject su ON su.id = d.subject_id, "
				+ "dataset_metadata dm, dataset_acquisition da, examination e, pet_dataset pd where d.updated_metadata_id = dm.id "
				+ "and da.id = d.dataset_acquisition_id and da.examination_id = e.id and pd.id = d.id;", "SolrResult");
		Query ctQuery = em.createNativeQuery("select d.id as datasetId, dm.name as datasetName, dm.dataset_modality_type as datasetType, null as datasetNature, "
				+ "d.creation_date as datasetCreationDate, e.comment as examinationComment, e.examination_date as examinationDate, su.name as subjectName, st.name as studyName, "
				+ "d.study_id as studyId from dataset d  LEFT JOIN study st ON st.id = d.study_id LEFT JOIN subject su ON su.id = d.subject_id, dataset_metadata dm, "
				+ "dataset_acquisition da, examination e, ct_dataset cd where d.updated_metadata_id = dm.id "
				+ "and da.id = d.dataset_acquisition_id and da.examination_id = e.id and cd.id = d.id;", "SolrResult");
				
		result.addAll(mrQuery.getResultList());
		result.addAll(petQuery.getResultList());
		result.addAll(ctQuery.getResultList());
		
		return result;
	}
}