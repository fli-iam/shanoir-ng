/**
 * Shanoir NG - Import, manage and share neuroimaging data
 * Copyright (C) 2009-2019 Inria - https://www.inria.fr/
 * Contact us on https://project.inria.fr/shanoir/
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.html
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.shanoir.ng.solr.controler;

import java.io.IOException;
import java.util.List;

import org.apache.solr.client.solrj.SolrServerException;
import org.shanoir.ng.shared.exception.RestServiceException;
import org.shanoir.ng.solr.model.ShanoirSolrDocument;
import org.shanoir.ng.solr.model.ShanoirSolrQuery;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.solr.core.query.result.SolrResultPage;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;

/**
 * @author yyao
 *
 */
@Tag(name = "solr", description = "the Solr API")
@RequestMapping("/solr")
public interface SolrApi {
	
	@Operation(summary = "", description = "Index all data to Solr")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "204", description = "indexed data"),
        @ApiResponse(responseCode = "401", description = "unauthorized"),
        @ApiResponse(responseCode = "403", description = "forbidden"),
        @ApiResponse(responseCode = "422", description = "bad parameters"),
        @ApiResponse(responseCode = "500", description = "unexpected error") })
    @RequestMapping(value = "/index", produces = { "application/json" }, method = RequestMethod.POST)
    @PreAuthorize("hasRole('ADMIN')")
    ResponseEntity<Void> indexAll() throws RestServiceException, SolrServerException, IOException;

	@Operation(summary = "", description = "Search with facets and returns solr documents and facets page")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "found documents and facets"),
		@ApiResponse(responseCode = "204", description = "nothing found"),
		@ApiResponse(responseCode = "401", description = "unauthorized"),
		@ApiResponse(responseCode = "403", description = "forbidden"),
		@ApiResponse(responseCode = "500", description = "unexpected error") })
	@RequestMapping(value = "", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<SolrResultPage<ShanoirSolrDocument>> facetSearch(@Parameter(name = "facets", required = true) @Valid @RequestBody ShanoirSolrQuery query, Pageable pageable) throws RestServiceException;

	@Operation(summary = "", description = "Returns solr documents matching the given dataset ids")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "found documents"),
		@ApiResponse(responseCode = "204", description = "nothing found"),
		@ApiResponse(responseCode = "401", description = "unauthorized"),
		@ApiResponse(responseCode = "403", description = "forbidden"),
		@ApiResponse(responseCode = "500", description = "unexpected error") })
	@RequestMapping(value = "/byIds", consumes = {"application/json" }, produces = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Page<ShanoirSolrDocument>> findByIdIn(@Parameter(name = "dataset ids", required = true) @Valid @RequestBody List<Long> datasetIds, Pageable pageable) throws RestServiceException;
	
}
