# Shanoir NG - Import, manage and share neuroimaging data
# Copyright (C) 2009-2019 Inria - https://www.inria.fr/
# Contact us on https://project.inria.fr/shanoir/
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.html

######################################
# Default profile is production      #
######################################
server:
  port: 9904
  error:
    whitelabel:
      enabled: false
##### Database #####
spring:
  datasource:
    url: jdbc:mysql://${SHANOIR_PREFIX}database:3306/datasets?useLegacyDatetimeCode=false&serverTimezone=Europe/Paris&characterEncoding=utf-8&useSSL=false
    username: datasets
    password: password
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari.maximum-pool-size: 60
    hikari.minimum-idle:  60
  jpa:
    defer-datasource-initialization: true
    generate-ddl: false # default, but prefer to set it explicitly (bootstrap.sh)
    hibernate:
      # Hibernate ddl auto (create, create-drop, update, validate)
      ddl-auto: validate
      id:
        db_structure_naming_strategy: legacy
    properties:
      hibernate:
        connection:
          charset: UTF-8
        hbm2ddl:
          import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
  main:
    allow-circular-references: true
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER
  sql:
    init:
      data-locations: classpath:/scripts/import.sql
      mode: never
  threads:
    virtual:
      enabled: true
##### Others #####
  jackson:
    mapper:
      use-getters-as-setters: false
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
  jooq:
    sql-dialect: Mysql
  rabbitmq:
    host: ${SHANOIR_PREFIX}rabbitmq
    port: 5672
  session:
    store-type: none
  servlet:
    multipart:
      enabled: true
      max-file-size: 5000MB
      max-request-size: 5000MB
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${SHANOIR_URL_SCHEME}://${SHANOIR_URL_HOST}/auth/realms/shanoir-ng

springdoc:
  api-docs:
    path: '/api-docs'
    enabled: true
  swagger-ui:
    url: /shanoir-ng/datasets/api-docs
    config-url: /shanoir-ng/datasets/api-docs/swagger-config
    enabled: true
    disable-swagger-default-url: true

front.server:
  address: ${SHANOIR_URL_SCHEME}://${SHANOIR_URL_HOST}/shanoir-ng/
  url: ${SHANOIR_URL_SCHEME}://${SHANOIR_URL_HOST}

# Solr
solr.host: http://${SHANOIR_PREFIX}solr:8983/solr/shanoir
# microservices url
ms.url:
  shanoir-ng-studies: http://${SHANOIR_PREFIX}studies:9902/
# Data folder configuration
datasets-data: /var/datasets-data
bids-data-folder: /var/datasets-data/bids-data
# logging configuration
logging:
  file:
    name: /var/log/shanoir-ng-logs/shanoir-ng-datasets.log
  level:
    org.springframework.web: ERROR
    org.hibernate: ERROR
    org.shanoir: INFO


### ============================================================= ###
###                  Dicom Server Configuration                   ###
### ============================================================= ###
dcm4chee-arc:
  # Attention: the below values are used twice: 1) to address the PACS e.g.
  # to actually send the dicoms (in StowRs- or CStoreDicomService) to the
  # Shanoir backup PACS and 2) to generate the WADO download URLs in the
  # class DicomDatasetExpressionStrategy
  protocol: http://
  host: ${SHANOIR_PREFIX}dcm4chee-arc
  port.web: 8081
  port.dcm: 11112
  # flag for either using the DicomWeb protocol (REST) or the Dicom protocol
  # if false: 1) c-store used to send dicom files to PACS and 2) generated
  # URLs in db are in WADO-URI format
  # if true: 2) stow-rs used to send dicom files to PACS and 2) generated URLs
  # in db are in WADO-RS format
  # default is true as we want to use new protocols in sh-ng
  dicom.web: true
  dicom.c-store.aet.called: DCM4CHEE
  # use "/wado" for dcm4chee2 and "/dcm4chee-arc/aets/AS_RECEIVED/wado" for dcm4chee3
  dicom.wado.uri: /dcm4chee-arc/aets/AS_RECEIVED/wado
  dicom.web.rs: /dcm4chee-arc/aets/AS_RECEIVED/rs/studies
  dicom.web.rs.upload: /dcm4chee-arc/aets/DCM4CHEE/rs/studies
  dicom.web.http.client.max.total: 500
  dicom.web.http.client.max.per.route: 500

# VIP
vip:
  uri: ${VIP_URL_SCHEME}://${VIP_URL_HOST}/rest
  upload-folder: /tmp/vip_uploads
  sleep-time: 20000
  file-formats: .nii.gz, .nii
  result-file-name: input_params.json

# Service account
service-account:
  token:
    uri: ${SHANOIR_URL_SCHEME}://${SHANOIR_URL_HOST}/auth/realms/shanoir-ng/protocol/openid-connect/token
  client:
    id: service-account
    credential-secret: ${VIP_CLIENT_SECRET}
---

######################################
# DO NOT COMMIT VALUES MODIFICATIONS #
######################################
server:
  port: 9914
spring:
  config.activate.on-profile: dev
  datasource:
    url: jdbc:mysql://localhost:3307/datasets?useLegacyDatetimeCode=false&serverTimezone=Europe/Paris&characterEncoding=utf-8&useSSL=false
  jpa:
    generate-ddl: true
    hibernate:
      # Hibernate ddl auto (create, create-drop, update, validate)
      ddl-auto: create
    # Show or not log for each sql query
    show-sql: true
  main:
    allow-circular-references: true
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER
  rabbitmq:
    host: localhost
  sql:
    init:
      mode: always
  threads:
    virtual:
      enabled: true
front.server:
  address: https://shanoir-ng-nginx/shanoir-ng/
  url: https://shanoir-ng-nginx
keycloak:
  auth-server-url: https://shanoir-ng-nginx/auth
dcm4chee-arc:
  host: dcm4chee-arc
# Solr
spring.data.solr.host: http://solr:8983/solr/shanoir/
# microservices url
ms.url:
  shanoir-ng-studies: http://studies:9902/
# Data folder configuration
datasets-data: /var/datasets-data
bids-data-folder: /var/datasets-data/bids-data
# logging configuration
logging:
  file:
    name: /var/log/shanoir-ng-logs/shanoir-ng-datasets.log
  level:
    org.springframework.web: DEBUG
    org.hibernate: ERROR

---
spring:
  config.activate.on-profile: test
  main:
    allow-bean-definition-overriding: true
    allow-circular-references: true
  datasource:
    url: jdbc:h2:mem:SHANOIR_NG_DATASET;MODE=MySQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;DATABASE_TO_UPPER=false;NON_KEYWORDS=VALUE
    username: sa
    password:
    driverClassName: org.h2.Driver
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    defer-datasource-initialization: true
    generate-ddl: true
    hibernate:
      # Hibernate ddl auto (create, create-drop, update, validate)
      ddl-auto: create-drop
      properties:
        hibernate:
          format_sql=true:

  autoconfigure.exclude: org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER
  sql:
    init:
      data-locations: classpath:/scripts/test-data-h2.sql
      mode: always