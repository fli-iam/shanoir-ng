# Shanoir NG - Import, manage and share neuroimaging data
# Copyright (C) 2009-2019 Inria - https://www.inria.fr/
# Contact us on https://project.inria.fr/shanoir/
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.html

######################################
# Default profile is production      #
######################################
server:
  port: 9903
  error:
    whitelabel:
      enabled: false
##### Database #####
spring:
  datasource:
    url: jdbc:mysql://${SHANOIR_PREFIX}database:3306/import?useLegacyDatetimeCode=false&serverTimezone=Europe/Paris&characterEncoding=utf-8&useSSL=false
    username: import
    password: password
    # The SQL dialect makes Hibernate generate better SQL for the chosen database
    driver-class-name: com.mysql.jdbc.Driver
    initialize: false
    data: classpath:/scripts/import.sql
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      # Hibernate ddl auto (create, create-drop, update, validate)
      ddl-auto: validate
      # Naming strategy
      naming:
        strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        connection:
          charset: UTF-8
        hbm2ddl:
          import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
##### Others #####
  jackson:
    mapper:
      use-getters-as-setters: false
  jooq:
    sql-dialect: Mysql
  rabbitmq:
    host: ${SHANOIR_PREFIX}rabbitmq
    port: 5672
    username: guest
    password: guest
  session:
    store-type: none
  http:
    multipart:
      maxFileSize: 5000Mb
      maxRequestSize: 5000Mb
front.server:
  address: ${SHANOIR_URL_SCHEME}://${SHANOIR_URL_HOST}/shanoir-ng/
  url: ${SHANOIR_URL_SCHEME}://${SHANOIR_URL_HOST}
##### Keycloak #####
keycloak:
  # attention: this config for the token issuer needs to match the domain of the frontend
  # used for token creation AND the server url needs to be known from inside the docker network:
  auth-server-url: ${SHANOIR_URL_SCHEME}://${SHANOIR_URL_HOST}/auth
  cors: true
  realm: shanoir-ng
  resource: shanoir-ng-import
  ssl-required: external
  securityConstraints:
    - authRoles: 
      - ROLE_ADMIN
      - ROLE_EXPERT
      - ROLE_GUEST
      - ROLE_USER
    - securityCollections:
      - name: import secured api
      - patterns:
        - /*
# microservices url
ms.url:
  shanoir-ng-datasets: http://${SHANOIR_PREFIX}datasets:9904/datasetacquisition
  shanoir-ng-datasets-eeg: http://${SHANOIR_PREFIX}datasets:9904/datasetacquisition_eeg
  dicom2nifti: http://${SHANOIR_PREFIX}preclinical-bruker2dicom:5000/dicom2nifti
  shanoir-ng-studies-name: http://${SHANOIR_PREFIX}studies:9902/studies/names
  shanoir-ng-studies-subjects-names: http://${SHANOIR_PREFIX}studies:9902/subjects/names
  shanoir-ng-create-examination: http://${SHANOIR_PREFIX}datasets:9904/examinations
  shanoir-ng-studies-commons: http://${SHANOIR_PREFIX}studies:9902/common
# logging configuration
logging:
  file: /var/log/shanoir-ng-logs/shanoir-ng-import.log
  level:
    org.springframework.web: ERROR
    org.hibernate: ERROR
    org.shanoir: INFO
# Shanoir configurations
shanoir:
  import:
    directory: /tmp
    # Import from PACS configuration
    pacs:
      query:
        aet.calling:
          name: SHANOIR-SCU
          host: "0.0.0.0"
          #host: ${SHANOIR_PREFIX}import
          port: 11115
        aet.called:
          name: DCM4CHEE
          host: ${SHANOIR_PREFIX}dcm4chee-arc
          port: 11112
        maxPatients: 10
      store:
        aet.called:
          name: SHANOIR-SCP
          host: "0.0.0.0"
          #host: ${SHANOIR_PREFIX}import
          port: 44105
        folder: /tmp/shanoir-dcmrcv
    # In a dicom file. Format "tag==value;" If it is not needed to separate image files into separated folders for a dicom serie.
    series:
      # this long name has been kept, as Elise and Isabelle know it like this; to find it for further adaptions in later time
      # Also during the nifti conversion, it will be reconstructed as 4D volumes.
      seriesProperties: seriesDescription==*ASL*;seriesDescription==*asl*;protocolName==*ASL*;seriesDescription==*VIBE*DYN*;seriesDescription==*MoCoSeries*;seriesDescription==*DIFF*;seriesDescription==*Diff*;seriesDescription==*diff*;seriesDescription==*DTI*;seriesDescription==*DWI*;seriesDescription==*PERF*;seriesDescription==*Perf*;seriesDescription==*perf*;seriesDescription==*BOLD*;seriesDescription==*Bold*;seriesDescription==*bold*;seriesDescription==*intermediate t-Map*;protocolName==*DYN*;protocolName==*Dyn*;protocolName==*dyn*;seriesDescription==*QSM*;seriesDescription==*qsm*;seriesDescription==*RELAXO*;seriesDescription==*Relaxo*;seriesDescription==IRMF;protocolName==IRMF;seriesDescription==*mc*gse*;protocolName==*mc*gse*;
      # If in the serie, the dicom value equals the "value" for the "tag", then the serie will be considered as spectroscopy
      isspectroscopy: seriesDescription==*CSI*
  conversion:
    converters:
      path: /opt/nifti-converters/
        # Format "tag==value;". If in the serie, the dicom value equals the "value" for the "tag", then use clidcm instead of dcmnii to convert from dicom to nifti
      convertwithclidcm: seriesDescription==*Diff*;seriesDescription==*DIFF*;seriesDescription==*diff*;seriesDescription==*DTI*;seriesDescription==*DWI*;seriesDescription==*PERF*;seriesDescription==*Perf*;seriesDescription==*perf*; 
        # Format "tag==value;". If in the serie, the dicom value equals the "value" for the "tag", then output niftii file will be reconstructed as 4D volumes
---

######################################
# DO NOT COMMIT VALUES MODIFICATIONS #
######################################
server:
  port: 9923
spring:
  profiles: dev
  datasource:
    url: jdbc:mysql://localhost:3307/import?useLegacyDatetimeCode=false&serverTimezone=Europe/Paris&characterEncoding=utf-8&useSSL=false
    initialize: true
  jpa:
    hibernate:
      # Hibernate ddl auto (create, create-drop, update, validate)
      ddl-auto: create
    # Show or not log for each sql query
    show-sql: true
  rabbitmq:
    host: localhost
front.server:
  address: https://shanoir-ng-nginx/shanoir-ng/
  url: https://shanoir-ng-nginx
keycloak:
  auth-server-url: https://shanoir-ng-nginx/auth
ms.url:
  shanoir-ng-datasets: http://localhost:9904/datasetacquisition
  shanoir-ng-datasets-eeg: http://localhost:9904/datasetacquisition_eeg
  dicom2nifti: http://localhost:5000/dicom2nifti
  shanoir-ng-studies-name: http://localhost:9902/studies/names
  shanoir-ng-studies-subjects-names: http://localhost:9902/subjects/names
  shanoir-ng-create-examination: http://localhost:9904/examinations
  shanoir-ng-studies-commons: http://localhost:9902/common
# logging configuration
logging:
  file: /var/log/shanoir-ng-logs/shanoir-ng-import.log
  level:
    org.springframework.web: DEBUG
    org.hibernate: ERROR
    org.springframework.amqp: OFF
shanoir:
  import:
    directory: /tmp
    # Import from PACS configuration
    pacs:
      query:
        aet.calling:
          name: SHANOIR-SCU
          host: localhost
          port: 11115
        aet.called:
          name: DCM4CHEE
          host: localhost
          port: 11112
        maxPatients: 10
      store:
        aet.called:
          name: SHANOIR-SCP
          host: localhost
          port: 44125
        folder: /tmp/shanoir-dcmrcv

---

#################
# DO NOT CHANGE #
#################
spring:
  profiles: test
  datasource:
    url: jdbc:h2:mem:SHANOIR_NG_IMPORT;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 
    driver-class-name: org.h2.Driver
    data: classpath:/scripts/test-data-h2.sql
    initialize: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      # Hibernate ddl auto (create, create-drop, update, validate)
      ddl-auto: create
  autoconfigure.exclude: org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration
logging:
  file: /tmp/shanoir-ng-import.log
---

#################
# DO NOT CHANGE #
#################
spring:
  profiles: qualif
  datasource:
    initialize: false
  jpa:
    hibernate:
      # Hibernate ddl auto (create, create-drop, update, validate)
      ddl-auto: validate
#keycloak
keycloak:
  auth-server-url: https://shanoir-qualif.irisa.fr/shanoir-ng/auth
