#!/bin/bash

tmp_fifo()
{
	local fifo="`mktemp -u`"
	mkfifo "$fifo"
	echo "$fifo"
}

set -e

if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
	cat <<EOF
usage:	oneshot PATTERN [PATTERN...] -- COMMAND [ARG1 ...]

Run a command, monitor its outputs, and kill it after the given patterns have
been matched.

- PATTERNs are expressed as POSIX Extended Regular Expressions 
- COMMAND [ARG1 ...] is the command to be executed

PATTERNs are searched in the combined output (stdout+stderr) of the executed
process . The ordering is strict: they must be matched in the same order as
given in the command line.

As soon as the last PATTERN is matched (even if the other patterns were not
matched), the oneshot script sends SIGTERM to the process, then wait for its
termination.

The exit code is the numeber of remaining PATTERNs to be matched (0 if all
PATTERNs were matched successfully).
EOF
	exit 0
fi

patterns=()
while [ "$1" != "--" ] ; do
	patterns+=("$1")
	shift
done
shift

if [ ${#patterns[@]} -eq 0 ] ; then
	echo "oneshot: error: must provide at least one pattern" >&2
	exit 100
fi

# run the command with its outputs redirected to a fifo

fifo="`tmp_fifo`"
trap "rm $fifo" EXIT

exec "$@" >"$fifo" 2>&1 &
pid=$!
trap "kill $pid" INT TERM

# read from the fifo and match each pattern in order
IFS=
current=0
signaled=-1
while read -r line ; do
	echo "$line"
	if [[ "$line" =~ ${patterns[$current]} ]] ; then
		((current++)) || true
	fi
	if [[ "$line" =~ ${patterns[-1]} ]] ; then
		signaled="${#patterns[@]}"
		echo "  ------------------- sending SIGTERM -----------------------"
		kill "$pid" || true
		while read -r line ; do
			echo "$line"
		done
		break
	fi
done <"$fifo"

# eof

echo "  ------------------- match report --------------------------"
i=0
for pattern in "${patterns[@]}" ; do
	if [ $((i++)) -lt $current ] || [ $i -eq $signaled ] ; then
		status="\e[32m OK \e[39m"
	else
		status="\e[31mFAIL\e[39m"
	fi
	echo "  [ `echo -e "$status"` ]  $pattern"
done

wait "$pid" || true

result=$((${#patterns[@]} - current))
echo "  ------------------- terminated (exit $result) -------------------"
exit "$result"

