user www-data;
worker_processes  1;

error_log  /vol/log/error.log info;


events {
    worker_connections  1024;
}

http {

	##
	## Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	server_tokens off;

	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;

	##
	## Gzip Settings
	##

	gzip on;
	gzip_disable "msie6";


	##
	## Logging Settings
	##
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;


	server {
		listen *:80;

		# these two parameters are needed to allow importing large dataset
		client_max_body_size 6000M;
		proxy_read_timeout 1000s;

		# do not buffer anything
		proxy_buffering off;

		# transform 502 errors (bad gateway) into 503 (service unavailable)
		error_page 502 =503 /shanoir-ng/503.html;


		#
		# static content	
		#
	
		# static files for all requests for /*
		location /shanoir-ng/ {
			alias   /etc/nginx/html/;
			index  index.html;
			try_files $uri$args $uri$args/ $uri $uri/ /index.html =404;
		}

		#
		# keycloak
		#

		# forward (reverse-proxy) all requests for /shanoir-ng/keycloak/* to the Keycloak server
		location /auth/ {
			proxy_pass	http://shanoir-ng-keycloak:8080/auth/;
			proxy_set_header Host $host;

			location = /auth/ {
				return 404;
			}
			location = /auth/admin/ {
				return 404;
			}

		}
		
		# forward (reverse-proxy) Shanoir old login page to Keycloak login page
		location /Shanoir/login.seam {
			proxy_pass http://shanoir-ng-keycloak:8080/auth/realms/shanoir-ng/protocol/saml/clients/shanoir-old;
			proxy_set_header Host $host;
		}

		#
		# shanoir old
		#
		location / {
			rewrite ^/$	/Shanoir/	permanent;
		}

		# forward all requests for /(Shanoir|ShanoirUploader|Shanoir-Shanoir)/ to the shanoir-old container
		location /Shanoir/ {
			proxy_pass	http://shanoir:8080/Shanoir/;
			proxy_redirect	http://shanoir:8080/ https://$host/;
		}
		location /ShanoirUploader/
		{  
			proxy_pass	http://shanoir:8080/ShanoirUploader/;
			proxy_redirect	http://shanoir:8080/ https://$host/;
		}
		location /Shanoir-Shanoir/
		{  
			proxy_pass	http://shanoir:8080/Shanoir-Shanoir/;
			proxy_redirect	http://shanoir:8080/ https://$host/;

			sub_filter		"http://DOCKER_PREFIX-shanoir:8080" "$http_x_forwarded_proto://$host";
			sub_filter_once		off;
			sub_filter_types	text/xml;
		}

		#
		# shanoir ng (microservices)
		#

		# forward each subdirectory to the relevant microservice
		location /shanoir-ng/users/		{ proxy_pass http://shanoir-ng-users:9900/;		}
		location /shanoir-ng/studies/		{ proxy_pass http://shanoir-ng-studies:9900/;		}
		location /shanoir-ng/datasets/	{ proxy_pass http://shanoir-ng-datasets:9900/;	}
		location /shanoir-ng/import/	{ proxy_pass http://shanoir-ng-import:9900/;	}
		location /shanoir-ng/preclinical/	{ proxy_pass http://shanoir-ng-preclinical:9900/;	}

		#
		# DTM (microservice)
		#

		# forward each subdirectory to the relevant microservice
		location /dtm/		{ proxy_pass http://shanoir-ng-dtm:9900/;		}
	}
    include perfect-forward-secrecy.conf;
}
