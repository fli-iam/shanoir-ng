{
  "realm" : "shanoir-ng",
  "displayName" : "Shanoir",
  "enabled" : true,
  "resetPasswordAllowed" : true,
  "passwordPolicy" : "hashIterations and length and specialChars and digits and upperCase and lowerCase",
  "smtpServer" : {
    "host" : "SHANOIR_SMTP_HOST",
    "from" : "SHANOIR_ADMIN_EMAIL",
    "fromDisplayName" : "SHANOIR_ADMIN_NAME",
    "port" : "25"
  },
  "sslRequired": "all",
  "bruteForceProtected": true,
  "permanentLockout": false,
  "maxFailureWaitSeconds": 900,
  "minimumQuickLoginWaitSeconds": 60,
  "waitIncrementSeconds": 60,
  "quickLoginCheckMilliSeconds": 1000,
  "maxDeltaTimeSeconds": 43200,
  "failureFactor": 30,
  "roles": {
    "realm": [
      {
        "name": "ROLE_ADMIN"
      },
      {
        "name": "ROLE_EXPERT"
      },
      {
        "name": "ROLE_GUEST"
      },
      {
        "name": "ROLE_USER"
      }
    ],

    "client": {
      "shanoir-ng-users": [
        {
          "name": "uma_protection"
        }
      ]
    }
  },
  "clients": [
    {
      "clientId": "shanoir-ng-front",
      "redirectUris": [
        "SHANOIR_URL_SCHEME://SHANOIR_URL_HOST/*"
      ],
      "webOrigins": [
        "SHANOIR_URL_SCHEME://SHANOIR_URL_HOST"
      ],
      "directAccessGrantsEnabled": true,
      "publicClient": true,
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "name": "full name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-full-name-mapper",
          "consentRequired": true,
          "consentText": "${fullName}",
          "config": {
            "id.token.claim": "true",
            "access.token.claim": "true"
          }
        },
        {
          "name": "email",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": true,
          "consentText": "${email}",
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "email",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "email",
            "jsonType.label": "String"
          }
        },
        {
          "name": "family name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": true,
          "consentText": "${familyName}",
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "lastName",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "family_name",
            "jsonType.label": "String"
          }
        },
        {
          "name": "username",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": true,
          "consentText": "${username}",
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "username",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "preferred_username",
            "jsonType.label": "String"
          }
        },
        {
          "name": "userId",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "false",
            "user.attribute": "userId",
            "id.token.claim": "false",
            "access.token.claim": "true",
            "claim.name": "userId",
            "jsonType.label": "long"
          }
        },
        {
          "name": "canImportFromPACS",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper",
          "consentRequired": false,
          "config": {
            "userinfo.token.claim": "false",
            "user.attribute": "canImportFromPACS",
            "id.token.claim": "false",
            "access.token.claim": "true",
            "claim.name": "canImportFromPACS",
            "jsonType.label": "boolean"
          }
        },
        {
          "name": "role list",
          "protocol": "saml",
          "protocolMapper": "saml-role-list-mapper",
          "consentRequired": false,
          "config": {
            "single": "false",
            "attribute.nameformat": "Basic",
            "attribute.name": "Role"
          }
        },
        {
          "name": "given name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper",
          "consentRequired": true,
          "consentText": "${givenName}",
          "config": {
            "userinfo.token.claim": "true",
            "user.attribute": "firstName",
            "id.token.claim": "true",
            "access.token.claim": "true",
            "claim.name": "given_name",
            "jsonType.label": "String"
          }
        }
      ]
    },
	{
		"clientId": "shanoir-uploader",
		"surrogateAuthRequired": false,
		"enabled": true,
		"clientAuthenticatorType": "client-secret",
		"redirectUris": [
			"http://localhost*"
		],
		"webOrigins": [],
		"notBefore": 0,
		"bearerOnly": false,
		"consentRequired": false,
		"standardFlowEnabled": true,
		"implicitFlowEnabled": false,
		"directAccessGrantsEnabled": true,
		"serviceAccountsEnabled": false,
		"publicClient": true,
		"frontchannelLogout": false,
		"protocol": "openid-connect",
		"attributes": {
			"saml.assertion.signature": "false",
			"saml.force.post.binding": "false",
			"saml.multivalued.roles": "false",
			"saml.encrypt": "false",
			"saml_force_name_id_format": "false",
			"saml.client.signature": "false",
			"saml.authnstatement": "false",
			"saml.server.signature": "false",
			"saml.server.signature.keyinfo.ext": "false",
			"saml.onetimeuse.condition": "false"
		},
		"fullScopeAllowed": true,
		"nodeReRegistrationTimeout": -1,
		"protocolMappers": [
			{
				"name": "role list",
				"protocol": "saml",
				"protocolMapper": "saml-role-list-mapper",
				"consentRequired": false,
				"config": {
					"single": "false",
					"attribute.nameformat": "Basic",
					"attribute.name": "Role"
				}
			},
			{
				"name": "username",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${username}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "username",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "preferred_username",
					"jsonType.label": "String"
				}
			},
			{
				"name": "full name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-full-name-mapper",
				"consentRequired": true,
				"consentText": "${fullName}",
				"config": {
					"id.token.claim": "true",
					"access.token.claim": "true"
				}
			},
			{
				"name": "given name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${givenName}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "firstName",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "given_name",
					"jsonType.label": "String"
				}
			},
			{
				"name": "email",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${email}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "email",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "email",
					"jsonType.label": "String"
				}
			},
			{
			  "name": "userId",
			  "protocol": "openid-connect",
			  "protocolMapper": "oidc-usermodel-attribute-mapper",
			  "consentRequired": false,
			  "config": {
				"userinfo.token.claim": "false",
				"user.attribute": "userId",
				"id.token.claim": "false",
				"access.token.claim": "true",
				"claim.name": "userId",
				"jsonType.label": "long"
			  }
			},
			{
			  "name": "canImportFromPACS",
			  "protocol": "openid-connect",
			  "protocolMapper": "oidc-usermodel-attribute-mapper",
			  "consentRequired": false,
			  "config": {
				"userinfo.token.claim": "false",
				"user.attribute": "canImportFromPACS",
				"id.token.claim": "false",
				"access.token.claim": "true",
				"claim.name": "canImportFromPACS",
				"jsonType.label": "boolean"
			  }
			},
			{
				"name": "family name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${familyName}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "lastName",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "family_name",
					"jsonType.label": "String"
				}
			}
		],
		"useTemplateConfig": false,
		"useTemplateScope": false,
		"useTemplateMappers": false,
		"access": {
			"view": true,
			"configure": true,
			"manage": true
		}
	},
	{
		"clientId": "shanoir-ng-studies",
		"surrogateAuthRequired": false,
		"enabled": true,
		"clientAuthenticatorType": "client-secret",
		"redirectUris": [],
		"webOrigins": [],
		"notBefore": 0,
		"bearerOnly": true,
		"consentRequired": false,
		"standardFlowEnabled": true,
		"implicitFlowEnabled": false,
		"directAccessGrantsEnabled": true,
		"serviceAccountsEnabled": false,
		"publicClient": false,
		"frontchannelLogout": false,
		"protocol": "openid-connect",
		"attributes": {},
		"fullScopeAllowed": true,
		"nodeReRegistrationTimeout": -1,
		"protocolMappers": [
		{
			"name": "full name",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-full-name-mapper",
			"consentRequired": true,
			"consentText": "${fullName}",
			"config": {
			"id.token.claim": "true",
			"access.token.claim": "true"
			}
		},
		{
			"name": "email",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-usermodel-property-mapper",
			"consentRequired": true,
			"consentText": "${email}",
			"config": {
			"userinfo.token.claim": "true",
			"user.attribute": "email",
			"id.token.claim": "true",
			"access.token.claim": "true",
			"claim.name": "email",
			"jsonType.label": "String"
			}
		},
		{
			"name": "family name",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-usermodel-property-mapper",
			"consentRequired": true,
			"consentText": "${familyName}",
			"config": {
			"userinfo.token.claim": "true",
			"user.attribute": "lastName",
			"id.token.claim": "true",
			"access.token.claim": "true",
			"claim.name": "family_name",
			"jsonType.label": "String"
			}
		},
		{
			"name": "role list",
			"protocol": "saml",
			"protocolMapper": "saml-role-list-mapper",
			"consentRequired": false,
			"config": {
			"single": "false",
			"attribute.nameformat": "Basic",
			"attribute.name": "Role"
			}
		},
		{
			"name": "given name",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-usermodel-property-mapper",
			"consentRequired": true,
			"consentText": "${givenName}",
			"config": {
			"userinfo.token.claim": "true",
			"user.attribute": "firstName",
			"id.token.claim": "true",
			"access.token.claim": "true",
			"claim.name": "given_name",
			"jsonType.label": "String"
			}
		},
		{
			"name": "username",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-usermodel-property-mapper",
			"consentRequired": true,
			"consentText": "${username}",
			"config": {
			"userinfo.token.claim": "true",
			"user.attribute": "username",
			"id.token.claim": "true",
			"access.token.claim": "true",
			"claim.name": "preferred_username",
			"jsonType.label": "String"
			}
		}
		],
		"useTemplateConfig": false,
		"useTemplateScope": false,
		"useTemplateMappers": false,
		"access": {
		"view": true,
		"configure": true,
		"manage": true
		}
	},
    {
		"clientId": "shanoir-ng-import",
		"surrogateAuthRequired": false,
		"enabled": true,
		"clientAuthenticatorType": "client-secret",
		"redirectUris": [],
		"webOrigins": [],
		"notBefore": 0,
		"bearerOnly": true,
		"consentRequired": false,
		"standardFlowEnabled": true,
		"implicitFlowEnabled": false,
		"directAccessGrantsEnabled": true,
		"serviceAccountsEnabled": false,
		"publicClient": false,
		"frontchannelLogout": false,
		"protocol": "openid-connect",
		"attributes": {
			"saml.assertion.signature": "false",
			"saml.force.post.binding": "false",
			"saml.multivalued.roles": "false",
			"saml.encrypt": "false",
			"saml_force_name_id_format": "false",
			"saml.client.signature": "false",
			"saml.authnstatement": "false",
			"saml.server.signature": "false",
			"saml.server.signature.keyinfo.ext": "false",
			"saml.onetimeuse.condition": "false"
		},
		"fullScopeAllowed": true,
		"nodeReRegistrationTimeout": -1,
		"protocolMappers": [
			{
				"name": "role list",
				"protocol": "saml",
				"protocolMapper": "saml-role-list-mapper",
				"consentRequired": false,
				"config": {
					"single": "false",
					"attribute.nameformat": "Basic",
					"attribute.name": "Role"
				}
			},
			{
				"name": "email",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${email}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "email",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "email",
					"jsonType.label": "String"
				}
			},
			{
				"name": "full name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-full-name-mapper",
				"consentRequired": true,
				"consentText": "${fullName}",
				"config": {
					"id.token.claim": "true",
					"access.token.claim": "true"
				}
			},
			{
				"name": "given name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${givenName}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "firstName",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "given_name",
					"jsonType.label": "String"
				}
			},
			{
				"name": "family name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${familyName}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "lastName",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "family_name",
					"jsonType.label": "String"
				}
			},
			{
				"name": "username",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${username}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "username",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "preferred_username",
					"jsonType.label": "String"
				}
			}
		],
		"useTemplateConfig": false,
		"useTemplateScope": false,
		"useTemplateMappers": false,
		"access": {
			"view": true,
			"configure": true,
			"manage": true
		}
	},
    {
		"clientId": "shanoir-ng-front-debug",
		"surrogateAuthRequired": false,
		"enabled": true,
		"clientAuthenticatorType": "client-secret",
		"redirectUris": [],
		"webOrigins": [],
		"notBefore": 0,
		"bearerOnly": true,
		"consentRequired": false,
		"standardFlowEnabled": true,
		"implicitFlowEnabled": false,
		"directAccessGrantsEnabled": true,
		"serviceAccountsEnabled": false,
		"publicClient": false,
		"frontchannelLogout": false,
		"protocol": "openid-connect",
		"attributes": {
			"saml.assertion.signature": "false",
			"saml.force.post.binding": "false",
			"saml.multivalued.roles": "false",
			"saml.encrypt": "false",
			"saml_force_name_id_format": "false",
			"saml.client.signature": "false",
			"saml.authnstatement": "false",
			"saml.server.signature": "false",
			"saml.server.signature.keyinfo.ext": "false",
			"saml.onetimeuse.condition": "false"
		},
		"fullScopeAllowed": true,
		"nodeReRegistrationTimeout": -1,
		"protocolMappers": [
			{
				"name": "role list",
				"protocol": "saml",
				"protocolMapper": "saml-role-list-mapper",
				"consentRequired": false,
				"config": {
					"single": "false",
					"attribute.nameformat": "Basic",
					"attribute.name": "Role"
				}
			},
			{
				"name": "email",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${email}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "email",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "email",
					"jsonType.label": "String"
				}
			},
			{
				"name": "full name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-full-name-mapper",
				"consentRequired": true,
				"consentText": "${fullName}",
				"config": {
					"id.token.claim": "true",
					"access.token.claim": "true"
				}
			},
			{
				"name": "given name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${givenName}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "firstName",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "given_name",
					"jsonType.label": "String"
				}
			},
			{
				"name": "family name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${familyName}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "lastName",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "family_name",
					"jsonType.label": "String"
				}
			},
			{
				"name": "username",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${username}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "username",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "preferred_username",
					"jsonType.label": "String"
				}
			}
		],
		"useTemplateConfig": false,
		"useTemplateScope": false,
		"useTemplateMappers": false,
		"access": {
			"view": true,
			"configure": true,
			"manage": true
		}
	},
    {
		"clientId": "shanoir-ng-datasets",
		"surrogateAuthRequired": false,
		"enabled": true,
		"clientAuthenticatorType": "client-secret",
		"redirectUris": [],
		"webOrigins": [],
		"notBefore": 0,
		"bearerOnly": true,
		"consentRequired": false,
		"standardFlowEnabled": true,
		"implicitFlowEnabled": false,
		"directAccessGrantsEnabled": true,
		"serviceAccountsEnabled": false,
		"publicClient": false,
		"frontchannelLogout": false,
		"protocol": "openid-connect",
		"attributes": {
			"saml.assertion.signature": "false",
			"saml.force.post.binding": "false",
			"saml.multivalued.roles": "false",
			"saml.encrypt": "false",
			"saml_force_name_id_format": "false",
			"saml.client.signature": "false",
			"saml.authnstatement": "false",
			"saml.server.signature": "false",
			"saml.server.signature.keyinfo.ext": "false",
			"saml.onetimeuse.condition": "false"
		},
		"fullScopeAllowed": true,
		"nodeReRegistrationTimeout": -1,
		"protocolMappers": [
			{
				"name": "full name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-full-name-mapper",
				"consentRequired": true,
				"consentText": "${fullName}",
				"config": {
					"id.token.claim": "true",
					"access.token.claim": "true"
				}
			},
			{
				"name": "role list",
				"protocol": "saml",
				"protocolMapper": "saml-role-list-mapper",
				"consentRequired": false,
				"config": {
					"single": "false",
					"attribute.nameformat": "Basic",
					"attribute.name": "Role"
				}
			},
			{
				"name": "username",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${username}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "username",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "preferred_username",
					"jsonType.label": "String"
				}
			},
			{
				"name": "given name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${givenName}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "firstName",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "given_name",
					"jsonType.label": "String"
				}
			},
			{
				"name": "email",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${email}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "email",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "email",
					"jsonType.label": "String"
				}
			},
			{
				"name": "family name",
				"protocol": "openid-connect",
				"protocolMapper": "oidc-usermodel-property-mapper",
				"consentRequired": true,
				"consentText": "${familyName}",
				"config": {
					"userinfo.token.claim": "true",
					"user.attribute": "lastName",
					"id.token.claim": "true",
					"access.token.claim": "true",
					"claim.name": "family_name",
					"jsonType.label": "String"
				}
			}
		],
		"useTemplateConfig": false,
		"useTemplateScope": false,
		"useTemplateMappers": false,
		"access": {
			"view": true,
			"configure": true,
			"manage": true
		}
	},
    {
		"clientId": "shanoir-ng-users",
		"surrogateAuthRequired": false,
		"enabled": true,
		"clientAuthenticatorType": "client-secret",
		"redirectUris": [],
		"webOrigins": [],
		"notBefore": 0,
		"bearerOnly": true,
		"consentRequired": false,
		"standardFlowEnabled": true,
		"implicitFlowEnabled": false,
		"directAccessGrantsEnabled": true,
		"serviceAccountsEnabled": false,
		"publicClient": false,
		"frontchannelLogout": false,
		"protocol": "openid-connect",
		"attributes": {},
		"fullScopeAllowed": true,
		"nodeReRegistrationTimeout": -1,
		"protocolMappers": [
		{
			"name": "full name",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-full-name-mapper",
			"consentRequired": true,
			"consentText": "${fullName}",
			"config": {
			"id.token.claim": "true",
			"access.token.claim": "true"
			}
		},
		{
			"name": "email",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-usermodel-property-mapper",
			"consentRequired": true,
			"consentText": "${email}",
			"config": {
			"userinfo.token.claim": "true",
			"user.attribute": "email",
			"id.token.claim": "true",
			"access.token.claim": "true",
			"claim.name": "email",
			"jsonType.label": "String"
			}
		},
		{
			"name": "family name",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-usermodel-property-mapper",
			"consentRequired": true,
			"consentText": "${familyName}",
			"config": {
			"userinfo.token.claim": "true",
			"user.attribute": "lastName",
			"id.token.claim": "true",
			"access.token.claim": "true",
			"claim.name": "family_name",
			"jsonType.label": "String"
			}
		},
		{
			"name": "role list",
			"protocol": "saml",
			"protocolMapper": "saml-role-list-mapper",
			"consentRequired": false,
			"config": {
			"single": "false",
			"attribute.nameformat": "Basic",
			"attribute.name": "Role"
			}
		},
		{
			"name": "given name",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-usermodel-property-mapper",
			"consentRequired": true,
			"consentText": "${givenName}",
			"config": {
			"userinfo.token.claim": "true",
			"user.attribute": "firstName",
			"id.token.claim": "true",
			"access.token.claim": "true",
			"claim.name": "given_name",
			"jsonType.label": "String"
			}
		},
		{
			"name": "username",
			"protocol": "openid-connect",
			"protocolMapper": "oidc-usermodel-property-mapper",
			"consentRequired": true,
			"consentText": "${username}",
			"config": {
			"userinfo.token.claim": "true",
			"user.attribute": "username",
			"id.token.claim": "true",
			"access.token.claim": "true",
			"claim.name": "preferred_username",
			"jsonType.label": "String"
			}
		}
		],
		"useTemplateConfig": false,
		"useTemplateScope": false,
		"useTemplateMappers": false,
		"access": {
		"view": true,
		"configure": true,
		"manage": true
		}
	}
  ],
  
  "loginTheme": "shanoir-theme",

  "authenticationFlows": [
    {
      "alias": "Browser script",
      "description": "browser based authentication",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": false,
      "authenticationExecutions": [
        {
          "authenticator": "auth-cookie",
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "auth-spnego",
          "requirement": "DISABLED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "identity-provider-redirector",
          "requirement": "ALTERNATIVE",
          "priority": 25,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "ALTERNATIVE",
          "priority": 30,
          "flowAlias": "Browser script forms",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        },
        {
          "authenticatorConfig": "CheckExpirationDateConfig",
          "authenticator": "auth-script-based",
          "requirement": "REQUIRED",
          "priority": 31,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "alias": "Browser script forms",
      "description": "Username, password, otp and other auth forms.",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": false,
      "authenticationExecutions": [
        {
          "authenticator": "auth-username-password-form",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "auth-otp-form",
          "requirement": "OPTIONAL",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "alias": "Handle Existing Account",
      "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "idp-confirm-link",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "idp-email-verification",
          "requirement": "ALTERNATIVE",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "ALTERNATIVE",
          "priority": 30,
          "flowAlias": "Verify Existing Account by Re-authentication",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "Verify Existing Account by Re-authentication",
      "description": "Reauthentication of existing account",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "idp-username-password-form",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "auth-otp-form",
          "requirement": "OPTIONAL",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "alias": "browser",
      "description": "browser based authentication",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "auth-cookie",
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "auth-spnego",
          "requirement": "DISABLED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "identity-provider-redirector",
          "requirement": "ALTERNATIVE",
          "priority": 25,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "ALTERNATIVE",
          "priority": 30,
          "flowAlias": "forms",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "clients",
      "description": "Base authentication for clients",
      "providerId": "client-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "client-secret",
          "requirement": "ALTERNATIVE",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "client-jwt",
          "requirement": "ALTERNATIVE",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "alias": "direct grant",
      "description": "OpenID Connect Resource Owner Grant",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "direct-grant-validate-username",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "direct-grant-validate-password",
          "requirement": "REQUIRED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "direct-grant-validate-otp",
          "requirement": "OPTIONAL",
          "priority": 30,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "alias": "first broker login",
      "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticatorConfig": "review profile config",
          "authenticator": "idp-review-profile",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticatorConfig": "create unique user config",
          "authenticator": "idp-create-user-if-unique",
          "requirement": "ALTERNATIVE",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "requirement": "ALTERNATIVE",
          "priority": 30,
          "flowAlias": "Handle Existing Account",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "forms",
      "description": "Username, password, otp and other auth forms.",
      "providerId": "basic-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "auth-username-password-form",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "auth-otp-form",
          "requirement": "OPTIONAL",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "alias": "registration",
      "description": "registration flow",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "registration-page-form",
          "requirement": "REQUIRED",
          "priority": 10,
          "flowAlias": "registration form",
          "userSetupAllowed": false,
          "autheticatorFlow": true
        }
      ]
    },
    {
      "alias": "registration form",
      "description": "registration form",
      "providerId": "form-flow",
      "topLevel": false,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "registration-user-creation",
          "requirement": "REQUIRED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "registration-profile-action",
          "requirement": "REQUIRED",
          "priority": 40,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "registration-password-action",
          "requirement": "REQUIRED",
          "priority": 50,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "registration-recaptcha-action",
          "requirement": "DISABLED",
          "priority": 60,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "alias": "reset credentials",
      "description": "Reset credentials for a user if they forgot their password or something",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "reset-credentials-choose-user",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "reset-credential-email",
          "requirement": "REQUIRED",
          "priority": 20,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "reset-password",
          "requirement": "REQUIRED",
          "priority": 30,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        },
        {
          "authenticator": "reset-otp",
          "requirement": "OPTIONAL",
          "priority": 40,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    },
    {
      "alias": "saml ecp",
      "description": "SAML ECP Profile Authentication Flow",
      "providerId": "basic-flow",
      "topLevel": true,
      "builtIn": true,
      "authenticationExecutions": [
        {
          "authenticator": "http-basic-authenticator",
          "requirement": "REQUIRED",
          "priority": 10,
          "userSetupAllowed": false,
          "autheticatorFlow": false
        }
      ]
    }
  ],
  
  "authenticatorConfig": [
    {
      "alias": "CheckExpirationDateConfig",
      "config": {
        "scriptName": "CheckExpirationDate",
        "scriptCode": "/*\n * Template for JavaScript based authenticator's.\n * See org.keycloak.authentication.authenticators.browser.ScriptBasedAuthenticatorFactory\n */\n\n// import enum for error lookup\n//AuthenticationFlowError = Java.type(\"org.keycloak.authentication.AuthenticationFlowError\");\n\n/**\n * An example authenticate function.\n *\n * The following variables are available for convenience:\n * user - current user {@see org.keycloak.models.UserModel}\n * realm - current realm {@see org.keycloak.models.RealmModel}\n * session - current KeycloakSession {@see org.keycloak.models.KeycloakSession}\n * httpRequest - current HttpRequest {@see org.jboss.resteasy.spi.HttpRequest}\n * script - current script {@see org.keycloak.models.ScriptModel}\n * LOG - current logger {@see org.jboss.logging.Logger}\n *\n * You one can extract current http request headers via:\n * httpRequest.getHttpHeaders().getHeaderString(\"Forwarded\")\n *\n * @param context {@see org.keycloak.authentication.AuthenticationFlowContext}\n */\nfunction authenticate(context) {\n\n    var username = user ? user.username : \"anonymous\";\n    LOG.info(script.name + \" trace auth for: \" + username);\n\n    var authShouldFail = false;\n    if (authShouldFail) {\n        context.failure(\"INVALID_USER\");\n        return;\n    }\n    \n    if (user.attributes['expirationDate'] !== null && new Date().getTime() > user.attributes['expirationDate'][0]) {\n        user.enabled = false;\n        context.failure(\"USER_DISABLED\");\n        return;\n    }\n\n    context.success();\n}",
        "scriptDescription": "Check expiration date on login"
      }
    },
    {
      "alias": "create unique user config",
      "config": {
        "require.password.update.after.registration": "false"
      }
    },
    {
      "alias": "review profile config",
      "config": {
        "update.profile.on.first.login": "missing"
      }
    }
  ],
  
  "requiredActions": [
    {
      "alias": "CONFIGURE_TOTP",
      "name": "Configure OTP",
      "providerId": "CONFIGURE_TOTP",
      "enabled": true,
      "defaultAction": false,
      "config": {}
    },
    {
      "alias": "record-login-date-action",
      "name": "Record Login Date Action",
      "providerId": "record-login-date-action",
      "enabled": true,
      "defaultAction": false,
      "config": {}
    },
    {
      "alias": "terms_and_conditions",
      "name": "Terms and Conditions",
      "providerId": "terms_and_conditions",
      "enabled": false,
      "defaultAction": false,
      "config": {}
    },
    {
      "alias": "UPDATE_PASSWORD",
      "name": "Update Password",
      "providerId": "UPDATE_PASSWORD",
      "enabled": true,
      "defaultAction": false,
      "config": {}
    },
    {
      "alias": "UPDATE_PROFILE",
      "name": "Update Profile",
      "providerId": "UPDATE_PROFILE",
      "enabled": true,
      "defaultAction": false,
      "config": {}
    },
    {
      "alias": "VERIFY_EMAIL",
      "name": "Verify Email",
      "providerId": "VERIFY_EMAIL",
      "enabled": true,
      "defaultAction": false,
      "config": {}
    }
  ],
  
  "browserFlow": "Browser script"

}
