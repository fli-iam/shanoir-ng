#!/bin/bash

set -e

. /bin/entrypoint_common

require  SHANOIR_ADMIN_EMAIL
require  SHANOIR_ADMIN_NAME
optional SHANOIR_PREFIX
require  SHANOIR_SMTP_HOST
require  SHANOIR_URL_SCHEME
require  SHANOIR_URL_HOST
require  SHANOIR_VIEWER_OHIF_URL_SCHEME
require  SHANOIR_VIEWER_OHIF_URL_HOST

mkdir -p /tmp/import
sed "	s/SHANOIR_ADMIN_NAME/$SHANOIR_ADMIN_NAME/g
		s/SHANOIR_ADMIN_EMAIL/$SHANOIR_ADMIN_EMAIL/g
		s/SHANOIR_SMTP_HOST/$SHANOIR_SMTP_HOST/g
		s/SHANOIR_URL_SCHEME/$SHANOIR_URL_SCHEME/g
		s/SHANOIR_URL_HOST/$SHANOIR_URL_HOST/g
		s/SHANOIR_VIEWER_OHIF_URL_SCHEME/$SHANOIR_VIEWER_OHIF_URL_SCHEME/g
		s/SHANOIR_VIEWER_OHIF_URL_HOST/$SHANOIR_VIEWER_OHIF_URL_HOST/g
"		/opt/keycloak/shanoir-ng-realm.json > /tmp/import/shanoir-ng-realm.json

sed -i -E "s/SHANOIR_URL_SCHEME/$SHANOIR_URL_SCHEME/g" /opt/keycloak/themes/shanoir-theme/login/template.ftl 
sed -i -E "s/SHANOIR_URL_HOST/$SHANOIR_URL_HOST/g" /opt/keycloak/themes/shanoir-theme/login/template.ftl 

#
# keycloak options
# see: https://www.keycloak.org/server/all-config
#
export KC_HTTP_RELATIVE_PATH="/auth"
export KC_PROXY="${KC_PROXY:-edge}"
export KC_SPI_THEME_WELCOME_THEME="shanoir-theme"

# we disable strict hostname checking by default because:
# - the reverse proxy in production implements this check
# - since the 'nginx' container does not expose the master realm to the
#   outside, disabling strict checking allows us to reach the admin console
#   at http://localhost:8080/auth/admin/
export KC_HOSTNAME_STRICT="${KC_HOSTNAME_STRICT:false}"

export KC_DB="${DB_VENDOR:-mysql}"
export KC_DB_URL=jdbc:mysql://"${DB_ADDR:-${SHANOIR_PREFIX}keycloak-database}":"${DB_PORT:-3306}"/"${DB_DATABASE:-keycloak}"
export KC_DB_USERNAME="${DB_USER:-keycloak}"
export KC_DB_PASSWORD="${DB_PASSWORD:-password}"


require  SHANOIR_MIGRATION
oneshot=
patterns=(' \[io.quarkus\] \(main\) Keycloak .* started in [0-9.]+*s')
extra=("-Dms.users.url=http://${SHANOIR_PREFIX}users:9901"
       "-Dallowed.admin.ips=${SHANOIR_ALLOWED_ADMIN_IPS}")

case "$SHANOIR_MIGRATION" in
auto|dev)
	# create the shanoir-ng realm if it does not exist yet
	extra+=("-Dkeycloak.import=/tmp/import/shanoir-ng-realm.json"
		"-Dkeycloak.migration.strategy=IGNORE_EXISTING")
	;;
init)
	# create the admin account
	export KEYCLOAK_ADMIN="$SHANOIR_KEYCLOAK_USER"
	export KEYCLOAK_ADMIN_PASSWORD="$SHANOIR_KEYCLOAK_PASSWORD"

	# The admin account is created after server is started, thus to avoid a
	# race condition we need to match a KC-SERVICES0009 (user added to
	# realm) or a KC-SERVICES0010 (user already exists) before stopping the
	# server
	patterns+=('KC-SERVICES0009|KC-SERVICES0010')

	# wipe out the shanoir-ng realm and recreate it
	extra+=("-Dkeycloak.migration.action=import"
		"-Dkeycloak.migration.provider=singleFile"
		"-Dkeycloak.migration.file=/tmp/import/shanoir-ng-realm.json"
		"-Dkeycloak.migration.strategy=OVERWRITE_EXISTING")

        # FIXME: should check additional messages:
        #   "The batch executed successfully",
        #   "Initializing master realm",
        #   "Imported realm shanoir-ng",
        #   "Added user 'admin' to realm 'master'",
        #   r" INFO  \[org.jboss.as\] .* Keycloak .* started in \d+ms"
	oneshot=1
	;;
never)
	# FIXME: should we provide a facade for these too
	# TODO: ensure that the realm config is up-to-date
	#-> add an optional data volume to store the config of the imported realm
	;;

import)
	# Import the shanoir-ng users
	#
	# The exported users shall be provided in /import/shanoir-ng-users-*.json
	#
	# The realm file /import/shanoir-ng-realm.json is ignored (we use the
	# /tmp/import/shanoir-ng-realm.json generated above)
	#
	# Fails if the users file is not present.

	IMPORT_DIR="/import"
	if [ ! -d "$IMPORT_DIR" ] ; then
		error "import dir '$IMPORT_DIR' is not present"
	elif ! (shopt -s failglob ; ln -s "$IMPORT_DIR"/shanoir-ng-users-*.json /tmp/import/)
	then
		error "import dir '$IMPORT_DIR' does not contain any users file"
	else
		extra+=("-Dkeycloak.migration.action=import"
			"-Dkeycloak.migration.provider=dir"
			"-Dkeycloak.migration.dir='/tmp/import'"
			"-Dkeycloak.migration.strategy=OVERWRITE_EXISTING"
		)
		oneshot=1
	fi
	;;

export)
	# Export the shanoir-ng realm
	#
	# The realm is exported as:
	#	/export/shanoir-ng-realm.json
	#	/export/shanoir-ng-users-0.json
	#
	# Fails if the /export dir is not present or not empty

	EXPORT_DIR="/export"
	if [ ! -d "$EXPORT_DIR" ] ; then
		error "export dir '$EXPORT_DIR' is not present"
	elif [ -n "`ls -A "$EXPORT_DIR"`" ] ; then
		error "export dir '$EXPORT_DIR' is not empty"
	else
		extra+=("-Dkeycloak.migration.action=export"
			"-Dkeycloak.migration.realmName=shanoir-ng"
			"-Dkeycloak.migration.provider=dir"
			"-Dkeycloak.migration.usersExportStrategy=SAME_FILE"
			"-Dkeycloak.migration.dir='$EXPORT_DIR'"
		)
		oneshot=1
	fi
	;;
esac
unset SHANOIR_KEYCLOAK_USER SHANOIR_KEYCLOAK_PASSWORD


abort_if_error


# run keycloak
if [ -n "$oneshot" ] ; then
	# oneshot run (launch the server and kill it after startup)

	fifo="`tmp_fifo`"
	trap 'rm "$fifo"' EXIT
	# filter the output to keep only the interesting messages
	# (i.e: startup, import/export, warning, errors, ...)
	sed '	/[0-9] INFO /{
			/\[org\.keycloak\./p
			/\[io\.quarkus\]/p
			d
		}' <"$fifo" &

	# run until the server is fully started
	exec oneshot "${patterns[@]}" -- env "$@" "${extra[@]}" > "$fifo"

else
	# 'normal' run
	exec env "$@" "${extra[@]}"
fi
