# Shanoir NG - Import, manage and share neuroimaging data
# Copyright (C) 2009-2019 Inria - https://www.inria.fr/
# Contact us on https://project.inria.fr/shanoir/
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.html

openapi: "3.0.0"
info:
  version: 0.0.1
  title: Shanoir NG Centers Microservice
  description: Microservice API for Shanoir NG center managment
produces:
  - application/json
paths:
  /centers:
    get:
      operationId: findCenters
      description: Returns all the centers
      responses:
        '200':
          description: found centers
          schema:
            type: array
            items:
              $ref: '#/definitions/CenterDTO'
        '204':
          description: no center found
        '401':
          description: unauthorized
        '403':
          description: forbidden
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    post:
      operationId: saveNewCenter
      description: Saves a new center
      consumes:
        - application/json
      parameters:
        - name: center
          in: body
          description: center to create
          required: true
          schema:
            $ref: '#/definitions/Center'
      responses:
        '200':
          description: created center
          schema:
            $ref: '#/definitions/CenterDTO'
        '401':
          description: unauthorized
        '403':
          description: forbidden
        '422':
          description: bad parameters
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  '/centers/{centerId}':
    get:
      operationId: findCenterById
      description: 'If exists, returns the center corresponding to the given id'
      parameters:
        - $ref: '#/parameters/centerId'
      responses:
        '200':
          description: found center
          schema:
            $ref: '#/definitions/CenterDTO'
        '401':
          description: unauthorized
        '403':
          description: forbidden
        '404':
          description: no center found
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      operationId: updateCenter
      description: Updates a center
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/centerId'
        - name: center
          in: body
          description: center to update
          required: true
          schema:
            $ref: '#/definitions/Center'
      responses:
        '204':
          description: center updated
        '401':
          description: unauthorized
        '403':
          description: forbidden
        '422':
          description: bad parameters
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    delete:
      operationId: deleteCenter
      description: Deletes a center
      parameters:
        - $ref: '#/parameters/centerId'
      responses:
        '204':
          description: center deleted
        '401':
          description: unauthorized
        '403':
          description: forbidden
        '404':
          description: no center found
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /centers/names:
    get:
      operationId: findCentersNames
      description: Returns id and name for all the centers
      responses:
        '200':
          description: found centers
          schema:
            type: array
            items:
              $ref: '#/definitions/IdNameDTO'
        '204':
          description: no center found
        '401':
          description: unauthorized
        '403':
          description: forbidden
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
parameters:
  centerId:
    name: centerId
    in: path
    description: id of the center
    required: true
    type: integer
    format: int64
definitions:
  AcquisitionEquipment:
    type: object
  Center:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      acquisitionEquipmentList:
        type: array
        items:
          $ref: '#/definitions/AcquisitionEquipment'
      city:
        type: string
      country:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
      postalCode:
        type: string
      street:
        type: string
      studyCenterList:
        type: array
        items:
          $ref: '#/definitions/StudyCenter'
      website:
        type: string
  CenterDTO:
    type: object
    properties:
      id:
        type: integer
        format: int64
      city:
        type: string
      country:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
      postalCode:
        type: string
      street:
        type: string
      website:
        type: string
  IdNameDTO:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  StudyCenter:
    type: object
  ErrorModel:
    type: object
    properties:
      code:
        type: integer
        format: int32
      details:
        type: object
      message:
        type: string
