# Shanoir NG - Import, manage and share neuroimaging data
# Copyright (C) 2009-2019 Inria - https://www.inria.fr/
# Contact us on https://project.inria.fr/shanoir/
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.html

openapi: "3.0.0"
info:
  version: "1.0.0"
  title: Shanoir Challenge Scores Microservice
  description: Microservice API for the Shanoir challenge scores
  contact:
    url: http://shanoir.gforge.inria.fr/doku.php?id=en:us:contact
basePath: /challengeScores
produces:
  - application/json

paths:
  /score:
    get:
      description: If exists, returns the score set for the given subject + owner
      operationId: findScoreSet
      parameters:
        - $ref: "#/parameters/studyId"
        - $ref: "#/parameters/patientId"
        - $ref: "#/parameters/ownerId"
        - $ref: "#/parameters/inputDatasetId"
      responses:
        '200':
          description: score set
          schema:
            $ref: "#/definitions/ScoreSet"
        '404':
          description: no score set founded
        '409':
          description: several score sets founded, see error msg
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorModel"
    post:
      description: Creates/overwrite a score set
      operationId: saveScoreSet
      consumes:
        - application/json
      parameters:
        - $ref: "#/parameters/studyId"
        - $ref: "#/parameters/patientId"
        - $ref: "#/parameters/ownerId"
        - $ref: "#/parameters/inputDatasetId"
        - name: scoreSet
          in: body
          description: the score set to save
          required: true
          schema:
            $ref: "#/definitions/ScoreSet"
      responses:
        '204':
          description: scores saved
        default:
          description: unexpected error
          schema:
            $ref: "#/definitions/ErrorModel"
    delete:
      description: Deletes a score set
      operationId: deleteScoreSet
      parameters:
        - $ref: "#/parameters/studyId"
        - $ref: "#/parameters/patientId"
        - $ref: "#/parameters/ownerId"
        - $ref: "#/parameters/inputDatasetId"
      responses:
        '204':
          description: score set deleted
        '404':
          description: no score set founded
        '409':
          description: several score sets founded, need more data, see error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /score/{segmentedDatasetId}:
    get:
      description: If exists, returns the score set
      operationId: findScoreSetByDatasetId
      parameters:
        - $ref: "#/parameters/segmentedDatasetId"
      responses:
        '200':
          description: score set
          schema:
            $ref: '#/definitions/ScoreSet'
        '404':
          description: no score set founded
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    post:
      description: Creates/overwrite a score set
      operationId: saveScoreSetByDatasetId
      consumes:
        - application/json
      parameters:
        - $ref: "#/parameters/segmentedDatasetId"
        - $ref: "#/parameters/scoreSet"
      responses:
        '201':
          description: score created
        '204':
          description: score overwritten
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    delete:
      description: If exists, deletes the score set
      operationId: deleteScoreSetByDatasetId
      parameters:
        - $ref: "#/parameters/segmentedDatasetId"
      responses:
        '204':
          description: score set
          schema:
            $ref: '#/definitions/ScoreSet'
        '404':
          description: no score set founded
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /score/all/{studyId}:
    get:
      description: Returns the scores attached to the given study
      operationId: findScoresByStudyId
      parameters:
        - name: studyId
          in: path
          description: id of the study
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: score matrix
          schema:
            $ref: '#/definitions/ChallengeScores'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /score/all/xls/{studyId}:
    get:
      description: Returns the scores attached to the given study, as a Excel file
      operationId: getXLSScoresByStudyId
      produces:
        - application/vnd.ms-excel
      parameters:
        - name: studyId
          in: path
          description: id of the study
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Challenge scores Excel file
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /score/all/reset:
    post:
      description: Reset all scores
      operationId: resetScores
      parameters:
        - name: scoreList
          in: body
          description: the new data
          required: true
          schema:
            $ref: '#/definitions/ResetObject'
      responses:
        '204':
          description: Database reset
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /metric/all:
    get:
      description: Returns all the available metrics
      operationId: findAllMetrics
      responses:
        '200':
          description: all metrics
          schema:
            type: array
            items:
              $ref: '#/definitions/Metric'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    delete:
      description: Deletes all metrics
      operationId: deleteAllMetrics
      responses:
        '204':
          description: metrics cleared
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      description: Updates the metric list
      operationId: updateMetrics
      consumes:
        - application/json
      parameters:
        - name: metrics
          in: body
          description: the metrics to save
          required: true
          schema:
            $ref: "#/definitions/Metrics"
      responses:
        '204':
          description: metrics updated
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /metric:
    post:
      description: Creates new a metric
      operationId: saveMetric
      parameters:
        - $ref: "#/parameters/metricName"
        - $ref: "#/parameters/NaN"
        - $ref: "#/parameters/negInf"
        - $ref: "#/parameters/posInf"
        - $ref: "#/parameters/studyIds"
      responses:
        '201':
          description: metric created
          schema:
            $ref: '#/definitions/Metric'
        '409':
          description: metric name already exists in the database
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /metric/{id}:
    get:
      description: Gets a single metric based on its id
      operationId: getMetricById
      parameters:
        - $ref: "#/parameters/metricId"
      responses:
        '200':
          description: metric founded
          schema:
            $ref: '#/definitions/Metric'
        '404':
          description: metric not found
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      description: Creates / updates a metric
      operationId: createOrUpdateMetric
      parameters:
        - $ref: "#/parameters/metricId"
        - $ref: "#/parameters/metricName"
        - $ref: "#/parameters/NaN"
        - $ref: "#/parameters/negInf"
        - $ref: "#/parameters/posInf"
        - $ref: "#/parameters/studyIds"
      responses:
        '201':
          description: metric created
        '204':
          description: metric updated
        '409':
          description: metric name already exists in the database
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    delete:
      description: Deletes a single metric based on its id
      operationId: deleteMetricById
      parameters:
        - $ref: "#/parameters/metricId"
      responses:
        '204':
          description: metric deleted
        '404':
          description: metric not found
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /study:
    put:
      description: Saves or updates a study
      operationId: saveStudy
      parameters:
        - name: id
          in: query
          description: id of the study
          required: true
          type: integer
          format: int64
        - name: name
          in: query
          description: name of the study
          required: true
          type: string
      responses:
        '201':
          description: study created
        '204':
          description: study updated
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /study/all:
    delete:
      description: Deletes all studies
      operationId: deleteAllStudies
      responses:
        '204':
          description: studies cleared
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      description: Updates the study list
      operationId: updateStudies
      consumes:
        - application/json
      parameters:
        - name: studies
          in: body
          description: the studies to save
          required: true
          schema:
            $ref: "#/definitions/Studies"
      responses:
        '204':
          description: studies updated
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /challenger:
    put:
      description: Saves or updates a challenger
      operationId: saveChallenger
      parameters:
        - name: id
          in: query
          description: id of the challenger
          required: true
          type: integer
          format: int64
        - name: name
          in: query
          description: name of the challenger
          required: true
          type: string
      responses:
        '201':
          description: challenger created
        '204':
          description: challenger updated
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /challenger/all:
    delete:
      description: Deletes all challengers
      operationId: deleteAllChallengers
      responses:
        '204':
          description: challengers cleared
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      description: Updates the challenger list
      operationId: updateChallengers
      consumes:
        - application/json
      parameters:
        - name: challengers
          in: body
          description: the challengers to save
          required: true
          schema:
            $ref: "#/definitions/Challengers"
      responses:
        '204':
          description: challengers updated
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /patient:
    put:
      description: Saves or updates a patient
      operationId: savePatient
      parameters:
        - name: id
          in: query
          description: id of the patient
          required: true
          type: integer
          format: int64
        - name: name
          in: query
          description: name of the patient
          required: true
          type: string
      responses:
        '201':
          description: patient created
        '204':
          description: patient updated
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /patient/all:
    delete:
      description: Deletes all patients
      operationId: deleteAllPatients
      responses:
        '204':
          description: patients cleared
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      description: Updates the patient list
      operationId: updatePatients
      consumes:
        - application/json
      parameters:
        - name: patients
          in: body
          description: the patients to save
          required: true
          schema:
            $ref: "#/definitions/Patients"
      responses:
        '204':
          description: challengers updated
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
parameters:
  studyId:
    name: studyId
    in: query
    description: id of the study
    required: true
    type: integer
    format: int64
  patientId:
    name: patientId
    in: query
    description: patient (subject) of the score set
    required: true
    type: integer
    format: int64
  ownerId:
    name: ownerId
    in: query
    description: owner of the score set
    required: true
    type: integer
    format: int64
  inputDatasetId:
    name: inputDatasetId
    in: query
    description: input dataset id (should be the same for many segmentations)
    required: false
    type: integer
    format: int64
  segmentedDatasetId:
    name: segmentedDatasetId
    in: path
    description: id of the segmentation result dataset
    required: true
    type: integer
    format: int64
  scoreSet:
    name: scoreSet
    in: body
    description: the score set to save
    required: true
    schema:
        $ref: "#/definitions/ScoreSet"
  metricId:
    name: id
    in: path
    description: id of the metric
    required: true
    type: integer
    format: int64
  metricName:
    name: name
    in: query
    description: The name of the metric
    required: true
    type: string
  NaN:
    name: NaN
    in: query
    description: What to do if a value for this metric is NaN
    required: false
    type: string
  negInf:
    name: negInf
    in: query
    description: What to do if a value for this metric is a negative infinite
    required: false
    type: string
  posInf:
    name: posInf
    in: query
    description: What to do if a value for this metric a positive infinite
    required: false
    type: string
  studyIds:
    name: studyIds
    description: ids of the involved studies
    in: query
    required: false
    type: integer
    format: int64
    collectionFormat: multi

definitions:
  ScoreSet:
    type: array
    items:
      $ref: '#/definitions/Score'
  Score:
    type: object
    required:
      - metric
      - value
    properties:
      metric:
        type: string
      value:
        type: number
        format: float
  FlatScore:
    type: object
    required:
      - studyId
      - metricId
      - challengerId
      - patientId
    properties:
      value:
        type: number
        format: float
      studyId:
        type: number
        format: int64
      metricId:
        type: number
        format: int64
      challengerId:
        type: number
        format: int64
      patientId:
        type: number
        format: int64
      inputDatasetId:
        type: number
        format: int64
  ResetObject:
    required :
      - scoreList
    properties:
      scoreList:
        type: array
        items:
          $ref: '#/definitions/FlatScore'
      studyList:
        type: array
        items:
          $ref: '#/definitions/Study'
      metricList:
        type: array
        items:
          $ref: '#/definitions/Metric'
      challengerList:
        type: array
        items:
          $ref: '#/definitions/Challenger'
      patientList:
        type: array
        items:
          $ref: '#/definitions/Patient'
  ChallengeScores:
    type: array
    items:
      $ref: '#/definitions/MetricChallengers'
  MetricChallengers:
    type: object
    required:
      - metricName
      - challengers
    properties:
      metricName:
        type: string
      challengers:
        type: array
        items:
          $ref: '#/definitions/ChallengerSubjects'
  ChallengerSubjects:
    type: object
    required:
      - challengerName
      - subjects
    properties:
      challengerName:
        type: string
      subjects:
        type: array
        items:
          $ref: '#/definitions/SubjectScore'
  SubjectScore:
    type: object
    required:
      - subjectName
      - score
    properties:
      subjectName:
        type: string
      score:
        type: number
        format: float
  Metric:
    type: object
    required:
      - name
    properties:
      id:
        type: number
        format: int64
        description: The id of the metric
      name:
        type: string
        description: The name of the metric
      NaN:
        type: string
        description: What to do if a value for this metric is NaN
      posInf:
        type: string
        description: What to do if a value for this metric is a negative infinite
      negInf:
        type: string
        description: What to do if a value for this metric a positive infinite
      studyIds:
        type: array
        description: Ids of the involved studies
        items:
          type: integer
          format: int64
  Metrics:
    type: array
    items:
      $ref: '#/definitions/Metric'
  Challenger:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: number
        format: int64
        description: The id
      name:
        type: string
        description: The name
  Challengers:
    type: array
    items:
      $ref: '#/definitions/Challenger'
  Study:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: number
        format: int64
        description: The id
      name:
        type: string
        description: The name
  Studies:
    type: array
    items:
      $ref: '#/definitions/Study'
  Patient:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: number
        format: int64
        description: The id
      name:
        type: string
        description: The name
  Patients:
    type: array
    items:
      $ref: '#/definitions/Patient'
  ErrorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string