# Shanoir NG - Import, manage and share neuroimaging data
# Copyright (C) 2009-2019 Inria - https://www.inria.fr/
# Contact us on https://project.inria.fr/shanoir/
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see https://www.gnu.org/licenses/gpl-3.0.html

version: '3'
services:
  #
  # Keycloak: database and service
  #
  keycloak-database:
    container_name: "${SHANOIR_PREFIX}keycloak-database"
    build: ./docker-compose/keycloak-database
    environment:
      - MYSQL_DATABASE=keycloak
    volumes:
      - "keycloak-database-data:/var/lib/mysql"
    networks:
      - shanoir_ng_network
  keycloak:
    container_name: "${SHANOIR_PREFIX}keycloak"
    environment:
      - SHANOIR_ADMIN_EMAIL
      - SHANOIR_ADMIN_NAME
      - SHANOIR_URL_SCHEME
      - SHANOIR_URL_HOST
      - SHANOIR_VIEWER_OHIF_URL_SCHEME
      - SHANOIR_VIEWER_OHIF_URL_HOST
      - SHANOIR_SMTP_HOST
      - SHANOIR_MIGRATION
      - SHANOIR_KEYCLOAK_USER
      - SHANOIR_KEYCLOAK_PASSWORD
      - SHANOIR_ALLOWED_ADMIN_IPS
    build: ./docker-compose/keycloak
    networks:
      - shanoir_ng_network
    ports:
      - "8080:8080"
    depends_on:
      - "keycloak-database"
  #
  # RabbitMQ: inter-microservices communication
  #  
  rabbitmq:
    container_name: "${SHANOIR_PREFIX}rabbitmq"
    image: rabbitmq:3.7.7-management-alpine
    volumes:
      - "rabbitmq-data:/var/lib/rabbitmq/mnesia/rabbitmq"
    ports:
     - "5672:5672"
     - "15672:15672"
    networks:
      - shanoir_ng_network 
  #
  # Database for all other microservices
  #
  database:
    container_name: "${SHANOIR_PREFIX}database"
    build: ./docker-compose/database
    command: --max_allowed_packet 20000000
    env_file:
      - ./docker-compose/database/variables.env
    environment:
      - SHANOIR_MIGRATION
    volumes:
      - "database-data:/var/lib/mysql"
    ports:
     - "3307:3306"
    networks:
      - shanoir_ng_network
  #
  # Users microservice
  #
  users:
    container_name: "${SHANOIR_PREFIX}users"
    build: ./docker-compose/users
    environment:
      - SHANOIR_PREFIX
      - SHANOIR_URL_SCHEME
      - SHANOIR_URL_HOST
      - SHANOIR_KEYCLOAK_USER
      - SHANOIR_KEYCLOAK_PASSWORD
      - SHANOIR_SMTP_HOST
      - SHANOIR_ADMIN_EMAIL
      - SHANOIR_CERTIFICATE
      - SHANOIR_CERTIFICATE_PEM_CRT
      - SHANOIR_CERTIFICATE_PEM_KEY
      - SHANOIR_MIGRATION
    volumes:
      - "logs:/var/log/shanoir-ng-logs"
      - certificate-share-data:/etc/ssl/certs/java
    networks:
      - shanoir_ng_network
    ports:
     - "9901:9901"
     - "9911:9911"
    depends_on:
      - "database"
      - "rabbitmq"
  #
  # Studies microservice
  #
  studies:
    container_name: "${SHANOIR_PREFIX}studies"
    build: ./docker-compose/studies
    environment:
      - SHANOIR_PREFIX
      - SHANOIR_URL_SCHEME
      - SHANOIR_URL_HOST
      - SHANOIR_MIGRATION
    volumes:
      - "logs:/var/log/shanoir-ng-logs"
      - certificate-share-data:/etc/ssl/certs/java:ro
      - "studies-data:/var/studies-data"
      - "tmp:/tmp"
    networks:
      - shanoir_ng_network
    ports:
     - "9902:9902"
     - "9912:9912"
    depends_on:
      - "database"
      - "rabbitmq"
      - "users"
  #
  # Import microservice
  #
  import:
    container_name: "${SHANOIR_PREFIX}import"
    build: ./docker-compose/import
    environment:
      - SHANOIR_PREFIX
      - SHANOIR_URL_SCHEME
      - SHANOIR_URL_HOST
      - SHANOIR_MIGRATION
    volumes:
      - "logs:/var/log/shanoir-ng-logs"
      - certificate-share-data:/etc/ssl/certs/java:ro
      - "tmp:/tmp"
    networks:
      - shanoir_ng_network
    ports:
     - "9903:9903"
     - "9913:9913"
    depends_on:
      - "database"
      - "rabbitmq"
      - "users"
  #
  # Datasets microservice
  #
  datasets:
    container_name: "${SHANOIR_PREFIX}datasets"
    build: ./docker-compose/datasets
    environment:
      - SHANOIR_PREFIX
      - SHANOIR_URL_SCHEME
      - SHANOIR_URL_HOST
      - SHANOIR_VIEWER_OHIF_URL_SCHEME
      - SHANOIR_VIEWER_OHIF_URL_HOST
      - SHANOIR_MIGRATION
    volumes:
      - "logs:/var/log/shanoir-ng-logs"
      - certificate-share-data:/etc/ssl/certs/java:ro
      - "tmp:/tmp"
      - "datasets-data:/var/datasets-data"
    networks:
      - shanoir_ng_network
    ports:
     - "9904:9904"
     - "9914:9914"
    depends_on:
      - "database"
      - "rabbitmq"
      - "users"

  preclinical:
    container_name: "${SHANOIR_PREFIX}preclinical"
    build: ./docker-compose/preclinical
    environment:
      - SHANOIR_PREFIX
      - SHANOIR_URL_SCHEME
      - SHANOIR_URL_HOST
      - SHANOIR_MIGRATION
    volumes:
      - "logs:/var/log/shanoir-ng-logs"
      - certificate-share-data:/etc/ssl/certs/java:ro
      - "tmp:/tmp"
      - "extra-data:/var/extra-data"
    networks:
      - shanoir_ng_network
    ports:
     - "9905:9905"
     - "9915:9915"
    depends_on:
      - "database"
      - "rabbitmq"
      - "users"
  #
  # Bruker2Dicom, Dicom2Nifti microservice
  #
  preclinical-bruker2dicom:
    container_name: "${SHANOIR_PREFIX}preclinical-bruker2dicom"
    image: jcomedouteau/dicomifier.ws:1.3
    command: ["python3", "/opt/dicomifier.ws/run.py"]
    volumes:
      - "logs:/var/log/shanoir-ng-logs"
      - "tmp:/tmp"
    networks:
      - shanoir_ng_network
    ports:
     - "5000:5000"
  #
  # Solr microservice for Shanoir-NG search
  #
  solr:
    container_name: "${SHANOIR_PREFIX}solr"
    build: ./docker-compose/solr
    environment:
      - SOLR_LOG_LEVEL=SEVERE
    volumes:
      - "solr-data:/var/solr"
    networks:
      - shanoir_ng_network
    ports:
      - "8983:8983"
  # Backup PACS microservice: dcm4chee 5 arc-light
  #
  ldap:
    container_name: "${SHANOIR_PREFIX}ldap"
    image: dcm4che/slapd-dcm4chee:2.4.44-13.0
    logging:
      driver: json-file
      options:
        max-size: "10m"
    networks:
      - shanoir_ng_network
    ports:
      - "389:389"
    env_file: ./docker-compose/dcm4chee/variables.env
    volumes:
      - "dcm4chee-ldap-data:/var/lib/ldap"
      - "dcm4chee-sldap-data:/etc/ldap/slapd.d"
  dcm4chee-database:
    container_name: "${SHANOIR_PREFIX}dcm4chee-database"
    image: dcm4che/postgres-dcm4chee:10.0-13
    logging:
      driver: json-file
      options:
        max-size: "10m"
    networks:
      - shanoir_ng_network
    ports:
      - "5432:5432"
    env_file: ./docker-compose/dcm4chee/variables.env
    volumes:
      - "dcm4chee-database-data:/var/lib/postgresql/data"
  dcm4chee-arc:
    container_name: "${SHANOIR_PREFIX}dcm4chee-arc"
    image: dcm4che/dcm4chee-arc-psql:5.13.0
    logging:
      driver: json-file
      options:
        max-size: "10m"
    networks:
      - shanoir_ng_network
    ports:
      - "8081:8081"
      - "8443:8443"
      - "9990:9990"
      - "11112:11112"
      - "2575:2575"
    env_file: ./docker-compose/dcm4chee/variables.env
    environment:
      POSTGRES_HOST: "${SHANOIR_PREFIX}dcm4chee-database"
      WILDFLY_CHOWN: /opt/wildfly/standalone /storage
      WILDFLY_WAIT_FOR: "${SHANOIR_PREFIX}ldap:389 ${SHANOIR_PREFIX}dcm4chee-database:5432"
    depends_on:
      - "ldap"
      - "dcm4chee-database"
    volumes:
      - "dcm4chee-arc-wildfly-data:/opt/wildfly/standalone"
      - "dcm4chee-arc-storage-data:/storage"
  #
  # Nginx
  #
  nginx:
    container_name: shanoir-ng-nginx
    build: ./docker-compose/nginx
    environment:
      - SHANOIR_PREFIX
      - SHANOIR_URL_SCHEME
      - SHANOIR_URL_HOST
      - SHANOIR_VIEWER_OHIF_URL_SCHEME
      - SHANOIR_VIEWER_OHIF_URL_HOST
      - SHANOIR_X_FORWARDED
      - SHANOIR_INSTANCE_NAME
      - SHANOIR_INSTANCE_COLOR
      - SHANOIR_CERTIFICATE_PEM_CRT
      - SHANOIR_CERTIFICATE_PEM_KEY
      - SHANOIR_KEYCLOAK_ADAPTER_MODE
    volumes:
      - "logs:/var/log/nginx"
      - certificate-share-data:/opt/ssl:ro
    networks:
      - shanoir_ng_network
    ports:
     - "443:443"
    depends_on:
      - "users"
      - "studies"
      - "import"
      - "datasets"
      - "preclinical"
      - "rabbitmq"

volumes:
  keycloak-database-data:
  rabbitmq-data:
  database-data:
  datasets-data:
  extra-data:
  studies-data:
  dcm4chee-ldap-data:
  dcm4chee-sldap-data:
  dcm4chee-database-data:
  dcm4chee-arc-wildfly-data:
  dcm4chee-arc-storage-data:
  solr-data:
  certificate-share-data:
  tmp:
  logs:

networks:
  shanoir_ng_network:
